basePath: /api
consumes:
- application/json
definitions:
  AWSElasticBlockStoreVolumeSource:
    description: |-
      An AWS EBS disk must exist before mounting to a container. The disk
      must also be in the same AWS zone as the kubelet. An AWS EBS disk
      can only be mounted as read/write once. AWS EBS volumes support
      ownership management and SELinux relabeling.
    properties:
      fsType:
        description: |-
          Filesystem type of the volume that you want to mount.
          Tip: Ensure that the filesystem type is supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
          TODO: how do we prevent errors in the filesystem from compromising the machine
          +optional
        type: string
        x-go-name: FSType
      partition:
        description: |-
          The partition in the volume that you want to mount.
          If omitted, the default is to mount by volume name.
          Examples: For volume /dev/sda1, you specify the partition as "1".
          Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
          +optional
        format: int32
        type: integer
        x-go-name: Partition
      readOnly:
        description: |-
          Specify "true" to force and set the ReadOnly property in VolumeMounts to "true".
          If omitted, the default is "false".
          More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
          +optional
        type: boolean
        x-go-name: ReadOnly
      volumeID:
        description: |-
          Unique ID of the persistent disk resource in AWS (Amazon EBS volume).
          More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        type: string
        x-go-name: VolumeID
    title: Represents a Persistent Disk resource in AWS.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  Affinity:
    properties:
      nodeAffinity:
        $ref: '#/definitions/NodeAffinity'
      podAffinity:
        $ref: '#/definitions/PodAffinity'
      podAntiAffinity:
        $ref: '#/definitions/PodAntiAffinity'
    title: Affinity is a group of affinity scheduling rules.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  AzureDataDiskCachingMode:
    type: string
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  AzureDataDiskKind:
    type: string
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  AzureDiskVolumeSource:
    properties:
      cachingMode:
        $ref: '#/definitions/AzureDataDiskCachingMode'
      diskName:
        description: The Name of the data disk in the blob storage
        type: string
        x-go-name: DiskName
      diskURI:
        description: The URI the data disk in the blob storage
        type: string
        x-go-name: DataDiskURI
      fsType:
        description: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          +optional
        type: string
        x-go-name: FSType
      kind:
        $ref: '#/definitions/AzureDataDiskKind'
      readOnly:
        description: |-
          Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
        x-go-name: ReadOnly
    title: AzureDisk represents an Azure Data Disk mount on the host and bind mount
      to the pod.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  AzureFileVolumeSource:
    properties:
      readOnly:
        description: |-
          Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
        x-go-name: ReadOnly
      secretName:
        description: the name of secret that contains Azure Storage Account Name and
          Key
        type: string
        x-go-name: SecretName
      shareName:
        description: Share Name
        type: string
        x-go-name: ShareName
    title: AzureFile represents an Azure File Service mount on the host and bind mount
      to the pod.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  Capabilities:
    properties:
      add:
        description: |-
          Added capabilities
          +optional
        items:
          $ref: '#/definitions/Capability'
        type: array
        x-go-name: Add
      drop:
        description: |-
          Removed capabilities
          +optional
        items:
          $ref: '#/definitions/Capability'
        type: array
        x-go-name: Drop
    title: Adds and removes POSIX capabilities from running containers.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  Capability:
    description: Capability represent POSIX capabilities type
    type: string
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  CauseType:
    description: |-
      CauseType is a machine readable value providing more detail about what
      occurred in a status response. An operation may have multiple causes for a
      status (whether Failure or Success).
    type: string
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/apimachinery/pkg/apis/meta/v1
  CephFSVolumeSource:
    description: |-
      Represents a Ceph Filesystem mount that lasts the lifetime of a pod
      Cephfs volumes do not support ownership management or SELinux relabeling.
    properties:
      monitors:
        description: |-
          Required: Monitors is a collection of Ceph monitors
          More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
        items:
          type: string
        type: array
        x-go-name: Monitors
      path:
        description: |-
          Optional: Used as the mounted root, rather than the full Ceph tree, default is /
          +optional
        type: string
        x-go-name: Path
      readOnly:
        description: |-
          Optional: Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
          +optional
        type: boolean
        x-go-name: ReadOnly
      secretFile:
        description: |-
          Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
          More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
          +optional
        type: string
        x-go-name: SecretFile
      secretRef:
        $ref: '#/definitions/LocalObjectReference'
      user:
        description: |-
          Optional: User is the rados user name, default is admin
          More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
          +optional
        type: string
        x-go-name: User
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  CinderVolumeSource:
    description: |-
      A Cinder volume must exist before mounting to a container.
      The volume must also be in the same region as the kubelet.
      Cinder volumes support ownership management and SELinux relabeling.
    properties:
      fsType:
        description: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
          +optional
        type: string
        x-go-name: FSType
      readOnly:
        description: |-
          Optional: Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
          +optional
        type: boolean
        x-go-name: ReadOnly
      secretRef:
        $ref: '#/definitions/LocalObjectReference'
      volumeID:
        description: |-
          volume id used to identify the volume in cinder
          More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
        type: string
        x-go-name: VolumeID
    title: Represents a cinder volume resource in Openstack.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  ClusterCreateInput:
    properties:
      api_server:
        type: string
        x-go-name: ApiServer
      cloud_type:
        type: string
        x-go-name: CloudType
      cluster_type:
        type: string
        x-go-name: ClusterType
      ha:
        type: boolean
        x-go-name: HA
      kubeconfig:
        type: string
        x-go-name: Kubeconfig
      machines:
        items:
          $ref: '#/definitions/CreateMachineData'
        type: array
        x-go-name: Machines
      mode:
        type: string
        x-go-name: Mode
      name:
        type: string
        x-go-name: Name
      pod_cidr:
        type: string
        x-go-name: PodCidr
      provider:
        type: string
        x-go-name: Provider
      service_cidr:
        type: string
        x-go-name: ServiceCidr
      service_domain:
        type: string
        x-go-name: ServiceDomain
      version:
        type: string
        x-go-name: Version
    type: object
    x-go-package: yunion.io/x/yunion-kube/pkg/apis
  ClusterCreateOutput:
    properties:
      api_server:
        description: kubernetes api server endpoint
        type: string
        x-go-name: ApiServer
      cloud_type:
        type: string
        x-go-name: CloudType
      cluster_type:
        type: string
        x-go-name: ClusterType
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      deleted:
        type: boolean
        x-go-name: Deleted
      deleted_at:
        format: date-time
        type: string
        x-go-name: DeletedAt
      description:
        type: string
        x-go-name: Description
      domain_id:
        type: string
        x-go-name: DomainId
      ha:
        type: boolean
        x-go-name: Ha
      id:
        type: string
        x-go-name: Id
      is_emulated:
        type: boolean
        x-go-name: IsEmulated
      is_public:
        type: boolean
        x-go-name: IsPublic
      is_system:
        type: boolean
        x-go-name: IsSystem
      kubeconfig:
        description: kubernetes config
        type: string
        x-go-name: Kubeconfig
      mode:
        type: string
        x-go-name: Mode
      name:
        type: string
        x-go-name: Name
      pending_deleted:
        type: boolean
        x-go-name: PendingDeleted
      pending_deleted_at:
        format: date-time
        type: string
        x-go-name: PendingDeletedAt
      pod_cidr:
        type: string
        x-go-name: PodCidr
      project_src:
        type: string
        x-go-name: ProjectSrc
      provider:
        type: string
        x-go-name: Provider
      public_scope:
        type: string
        x-go-name: PublicScope
      resource_type:
        type: string
        x-go-name: ResourceType
      service_cidr:
        type: string
        x-go-name: ServiceCidr
      service_domain:
        type: string
        x-go-name: ServiceDomain
      status:
        type: string
        x-go-name: Status
      tenant_id:
        type: string
        x-go-name: ProjectId
      updated_at:
        format: date-time
        type: string
        x-go-name: UpdatedAt
      updated_version:
        format: int64
        type: integer
        x-go-name: UpdateVersion
      version:
        type: string
        x-go-name: Version
    type: object
    x-go-package: yunion.io/x/yunion-kube/pkg/apis
  ConditionStatus:
    type: string
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  ConfigMapDetail:
    properties:
      annotations:
        additionalProperties:
          type: string
        description: |-
          Annotations are unstructured key value data stored with a resource that may be set by
          external tooling. They are not queryable and should be preserved when modifying
          objects.  Annotation keys have the same formatting restrictions as Label keys. See the
          comments on Labels for details.
        type: object
        x-go-name: Annotations
      cluster:
        description: Onecloud cluster data
        type: string
        x-go-name: Cluster
      clusterID:
        type: string
        x-go-name: ClusterId
      creationTimestamp:
        $ref: '#/definitions/Time'
      data:
        additionalProperties:
          type: string
        description: |-
          Data contains the configuration data.
          Each key must be a valid DNS_SUBDOMAIN with an optional leading dot.
        type: object
        x-go-name: Data
      kind:
        $ref: '#/definitions/ResourceKind'
      labels:
        additionalProperties:
          type: string
        description: |-
          Labels are key value pairs that may be used to scope and select individual resources.
          Label keys are of the form:
          label-key ::= prefixed-name | name
          prefixed-name ::= prefix '/' name
          prefix ::= DNS_SUBDOMAIN
          name ::= DNS_LABEL
          The prefix is optional.  If the prefix is not specified, the key is assumed to be private
          to the user.  Other system components that wish to use labels must specify a prefix.
        type: object
        x-go-name: Labels
      name:
        description: |-
          Name is unique within a namespace. Name is primarily intended for creation
          idempotence and configuration definition.
        type: string
        x-go-name: Name
      namespace:
        description: |-
          Namespace defines the space within which name must be unique. An empty namespace is
          equivalent to the "default" namespace, but "default" is the canonical representation.
          Not all objects are required to be scoped to a namespace - the value of this field for
          those objects will be empty.
        type: string
        x-go-name: Namespace
      pods:
        description: Pods use configmap
        items:
          $ref: '#/definitions/Pod'
        type: array
        x-go-name: Pods
    type: object
    x-go-package: yunion.io/x/yunion-kube/pkg/apis
  ConfigMapEnvSource:
    description: |-
      The contents of the target ConfigMap's Data field will represent the
      key-value pairs as environment variables.
    properties:
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
        x-go-name: Name
      optional:
        description: |-
          Specify whether the ConfigMap must be defined
          +optional
        type: boolean
        x-go-name: Optional
    title: |-
      ConfigMapEnvSource selects a ConfigMap to populate the environment
      variables with.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  ConfigMapKeySelector:
    properties:
      key:
        description: The key to select.
        type: string
        x-go-name: Key
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
        x-go-name: Name
      optional:
        description: |-
          Specify whether the ConfigMap or it's key must be defined
          +optional
        type: boolean
        x-go-name: Optional
    title: Selects a key from a ConfigMap.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  ConfigMapProjection:
    description: |-
      The contents of the target ConfigMap's Data field will be presented in a
      projected volume as files using the keys in the Data field as the file names,
      unless the items element is populated with specific mappings of keys to paths.
      Note that this is identical to a configmap volume source without the default
      mode.
    properties:
      items:
        description: |-
          If unspecified, each key-value pair in the Data field of the referenced
          ConfigMap will be projected into the volume as a file whose name is the
          key and content is the value. If specified, the listed keys will be
          projected into the specified paths, and unlisted keys will not be
          present. If a key is specified which is not present in the ConfigMap,
          the volume setup will error unless it is marked optional. Paths must be
          relative and may not contain the '..' path or start with '..'.
          +optional
        items:
          $ref: '#/definitions/KeyToPath'
        type: array
        x-go-name: Items
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
        x-go-name: Name
      optional:
        description: |-
          Specify whether the ConfigMap or it's keys must be defined
          +optional
        type: boolean
        x-go-name: Optional
    title: Adapts a ConfigMap into a projected volume.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  ConfigMapVolumeSource:
    description: |-
      The contents of the target ConfigMap's Data field will be presented in a
      volume as files using the keys in the Data field as the file names, unless
      the items element is populated with specific mappings of keys to paths.
      ConfigMap volumes support ownership management and SELinux relabeling.
    properties:
      defaultMode:
        description: |-
          Optional: mode bits to use on created files by default. Must be a
          value between 0 and 0777. Defaults to 0644.
          Directories within the path are not affected by this setting.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
        format: int32
        type: integer
        x-go-name: DefaultMode
      items:
        description: |-
          If unspecified, each key-value pair in the Data field of the referenced
          ConfigMap will be projected into the volume as a file whose name is the
          key and content is the value. If specified, the listed keys will be
          projected into the specified paths, and unlisted keys will not be
          present. If a key is specified which is not present in the ConfigMap,
          the volume setup will error unless it is marked optional. Paths must be
          relative and may not contain the '..' path or start with '..'.
          +optional
        items:
          $ref: '#/definitions/KeyToPath'
        type: array
        x-go-name: Items
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
        x-go-name: Name
      optional:
        description: |-
          Specify whether the ConfigMap or it's keys must be defined
          +optional
        type: boolean
        x-go-name: Optional
    title: Adapts a ConfigMap into a volume.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  Container:
    properties:
      args:
        description: |-
          Arguments to the entrypoint.
          The docker image's CMD is used if this is not provided.
          Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
          cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax
          can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
          regardless of whether the variable exists or not.
          Cannot be updated.
          More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
          +optional
        items:
          type: string
        type: array
        x-go-name: Args
      command:
        description: |-
          Entrypoint array. Not executed within a shell.
          The docker image's ENTRYPOINT is used if this is not provided.
          Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
          cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax
          can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
          regardless of whether the variable exists or not.
          Cannot be updated.
          More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
          +optional
        items:
          type: string
        type: array
        x-go-name: Command
      env:
        description: |-
          List of environment variables to set in the container.
          Cannot be updated.
          +optional
          +patchMergeKey=name
          +patchStrategy=merge
        items:
          $ref: '#/definitions/EnvVar'
        type: array
        x-go-name: Env
      envFrom:
        description: |-
          List of sources to populate environment variables in the container.
          The keys defined within a source must be a C_IDENTIFIER. All invalid keys
          will be reported as an event when the container is starting. When a key exists in multiple
          sources, the value associated with the last source will take precedence.
          Values defined by an Env with a duplicate key will take precedence.
          Cannot be updated.
          +optional
        items:
          $ref: '#/definitions/EnvFromSource'
        type: array
        x-go-name: EnvFrom
      image:
        description: |-
          Docker image name.
          More info: https://kubernetes.io/docs/concepts/containers/images
          This field is optional to allow higher level config management to default or override
          container images in workload controllers like Deployments and StatefulSets.
          +optional
        type: string
        x-go-name: Image
      imagePullPolicy:
        $ref: '#/definitions/PullPolicy'
      lifecycle:
        $ref: '#/definitions/Lifecycle'
      livenessProbe:
        $ref: '#/definitions/Probe'
      name:
        description: |-
          Name of the container specified as a DNS_LABEL.
          Each container in a pod must have a unique name (DNS_LABEL).
          Cannot be updated.
        type: string
        x-go-name: Name
      ports:
        description: |-
          List of ports to expose from the container. Exposing a port here gives
          the system additional information about the network connections a
          container uses, but is primarily informational. Not specifying a port here
          DOES NOT prevent that port from being exposed. Any port which is
          listening on the default "0.0.0.0" address inside a container will be
          accessible from the network.
          Cannot be updated.
          +optional
          +patchMergeKey=containerPort
          +patchStrategy=merge
          +listType=map
          +listMapKey=containerPort
          +listMapKey=protocol
        items:
          $ref: '#/definitions/ContainerPort'
        type: array
        x-go-name: Ports
      readinessProbe:
        $ref: '#/definitions/Probe'
      resources:
        $ref: '#/definitions/ResourceRequirements'
      securityContext:
        $ref: '#/definitions/SecurityContext'
      stdin:
        description: |-
          Whether this container should allocate a buffer for stdin in the container runtime. If this
          is not set, reads from stdin in the container will always result in EOF.
          Default is false.
          +optional
        type: boolean
        x-go-name: Stdin
      stdinOnce:
        description: |-
          Whether the container runtime should close the stdin channel after it has been opened by
          a single attach. When stdin is true the stdin stream will remain open across multiple attach
          sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
          first client attaches to stdin, and then remains open and accepts data until the client disconnects,
          at which time stdin is closed and remains closed until the container is restarted. If this
          flag is false, a container processes that reads from stdin will never receive an EOF.
          Default is false
          +optional
        type: boolean
        x-go-name: StdinOnce
      terminationMessagePath:
        description: |-
          Optional: Path at which the file to which the container's termination message
          will be written is mounted into the container's filesystem.
          Message written is intended to be brief final status, such as an assertion failure message.
          Will be truncated by the node if greater than 4096 bytes. The total message length across
          all containers will be limited to 12kb.
          Defaults to /dev/termination-log.
          Cannot be updated.
          +optional
        type: string
        x-go-name: TerminationMessagePath
      terminationMessagePolicy:
        $ref: '#/definitions/TerminationMessagePolicy'
      tty:
        description: |-
          Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
          Default is false.
          +optional
        type: boolean
        x-go-name: TTY
      volumeDevices:
        description: |-
          volumeDevices is the list of block devices to be used by the container.
          This is a beta feature.
          +patchMergeKey=devicePath
          +patchStrategy=merge
          +optional
        items:
          $ref: '#/definitions/VolumeDevice'
        type: array
        x-go-name: VolumeDevices
      volumeMounts:
        description: |-
          Pod volumes to mount into the container's filesystem.
          Cannot be updated.
          +optional
          +patchMergeKey=mountPath
          +patchStrategy=merge
        items:
          $ref: '#/definitions/VolumeMount'
        type: array
        x-go-name: VolumeMounts
      workingDir:
        description: |-
          Container's working directory.
          If not specified, the container runtime's default will be used, which
          might be configured in the container image.
          Cannot be updated.
          +optional
        type: string
        x-go-name: WorkingDir
    title: A single application container that you want to run within a pod.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  ContainerPort:
    properties:
      containerPort:
        description: |-
          Number of port to expose on the pod's IP address.
          This must be a valid port number, 0 < x < 65536.
        format: int32
        type: integer
        x-go-name: ContainerPort
      hostIP:
        description: |-
          What host IP to bind the external port to.
          +optional
        type: string
        x-go-name: HostIP
      hostPort:
        description: |-
          Number of port to expose on the host.
          If specified, this must be a valid port number, 0 < x < 65536.
          If HostNetwork is specified, this must match ContainerPort.
          Most containers do not need this.
          +optional
        format: int32
        type: integer
        x-go-name: HostPort
      name:
        description: |-
          If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
          named port in a pod must have a unique name. Name for the port that can be
          referred to by services.
          +optional
        type: string
        x-go-name: Name
      protocol:
        $ref: '#/definitions/Protocol'
    title: ContainerPort represents a network port in a single container.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  ContainerState:
    description: |-
      Only one of its members may be specified.
      If none of them is specified, the default one is ContainerStateWaiting.
    properties:
      running:
        $ref: '#/definitions/ContainerStateRunning'
      terminated:
        $ref: '#/definitions/ContainerStateTerminated'
      waiting:
        $ref: '#/definitions/ContainerStateWaiting'
    title: ContainerState holds a possible state of container.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  ContainerStateRunning:
    properties:
      startedAt:
        $ref: '#/definitions/Time'
    title: ContainerStateRunning is a running state of a container.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  ContainerStateTerminated:
    properties:
      containerID:
        description: |-
          Container's ID in the format 'docker://<container_id>'
          +optional
        type: string
        x-go-name: ContainerID
      exitCode:
        description: Exit status from the last termination of the container
        format: int32
        type: integer
        x-go-name: ExitCode
      finishedAt:
        $ref: '#/definitions/Time'
      message:
        description: |-
          Message regarding the last termination of the container
          +optional
        type: string
        x-go-name: Message
      reason:
        description: |-
          (brief) reason from the last termination of the container
          +optional
        type: string
        x-go-name: Reason
      signal:
        description: |-
          Signal from the last termination of the container
          +optional
        format: int32
        type: integer
        x-go-name: Signal
      startedAt:
        $ref: '#/definitions/Time'
    title: ContainerStateTerminated is a terminated state of a container.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  ContainerStateWaiting:
    properties:
      message:
        description: |-
          Message regarding why the container is not yet running.
          +optional
        type: string
        x-go-name: Message
      reason:
        description: |-
          (brief) reason the container is not yet running.
          +optional
        type: string
        x-go-name: Reason
    title: ContainerStateWaiting is a waiting state of a container.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  ContainerStatus:
    properties:
      containerID:
        description: |-
          Container's ID in the format 'docker://<container_id>'.
          +optional
        type: string
        x-go-name: ContainerID
      image:
        description: |-
          The image the container is running.
          More info: https://kubernetes.io/docs/concepts/containers/images
          TODO(dchen1107): Which image the container is running with?
        type: string
        x-go-name: Image
      imageID:
        description: ImageID of the container's image.
        type: string
        x-go-name: ImageID
      lastState:
        $ref: '#/definitions/ContainerState'
      name:
        description: |-
          This must be a DNS_LABEL. Each container in a pod must have a unique name.
          Cannot be updated.
        type: string
        x-go-name: Name
      ready:
        description: Specifies whether the container has passed its readiness probe.
        type: boolean
        x-go-name: Ready
      restartCount:
        description: |-
          The number of times the container has been restarted, currently based on
          the number of dead containers that have not yet been removed.
          Note that this is calculated from dead containers. But those containers are subject to
          garbage collection. This value will get capped at 5 by GC.
        format: int32
        type: integer
        x-go-name: RestartCount
      state:
        $ref: '#/definitions/ContainerState'
    title: ContainerStatus contains details for the current status of this container.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  ContainerUpdateInput:
    properties:
      image:
        type: string
        x-go-name: Image
      name:
        type: string
        x-go-name: Name
    required:
    - name
    type: object
    x-go-package: yunion.io/x/yunion-kube/pkg/apis
  CreateMachineData:
    properties:
      address:
        type: string
        x-go-name: Address
      cluster_id:
        type: string
        x-go-name: ClusterId
      config:
        $ref: '#/definitions/MachineCreateConfig'
      first_node:
        type: boolean
        x-go-name: FirstNode
      name:
        type: string
        x-go-name: Name
      provider:
        type: string
        x-go-name: Provider
      resource_id:
        type: string
        x-go-name: ResourceId
      resource_type:
        type: string
        x-go-name: ResourceType
      role:
        type: string
        x-go-name: Role
    type: object
    x-go-package: yunion.io/x/yunion-kube/pkg/apis
  DNSPolicy:
    title: DNSPolicy defines how a pod's DNS will be configured.
    type: string
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  Deployment:
    description: |-
      DEPRECATED - This group version of Deployment is deprecated by apps/v1/Deployment. See the release notes for
      more information.
      Deployment enables declarative updates for Pods and ReplicaSets.
    properties:
      annotations:
        additionalProperties:
          type: string
        description: |-
          Annotations is an unstructured key value map stored with a resource that may be
          set by external tools to store and retrieve arbitrary metadata. They are not
          queryable and should be preserved when modifying objects.
          More info: http://kubernetes.io/docs/user-guide/annotations
          +optional
        type: object
        x-go-name: Annotations
      apiVersion:
        description: |-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and
          may reject unrecognized values.
          More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
          +optional
        type: string
        x-go-name: APIVersion
      clusterName:
        description: |-
          The name of the cluster which the object belongs to.
          This is used to distinguish resources with same name and namespace in different clusters.
          This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
          +optional
        type: string
        x-go-name: ClusterName
      creationTimestamp:
        $ref: '#/definitions/Time'
      deletionGracePeriodSeconds:
        description: |-
          Number of seconds allowed for this object to gracefully terminate before
          it will be removed from the system. Only set when deletionTimestamp is also set.
          May only be shortened.
          Read-only.
          +optional
        format: int64
        type: integer
        x-go-name: DeletionGracePeriodSeconds
      deletionTimestamp:
        $ref: '#/definitions/Time'
      finalizers:
        description: |-
          Must be empty before the object is deleted from the registry. Each entry
          is an identifier for the responsible component that will remove the entry
          from the list. If the deletionTimestamp of the object is non-nil, entries
          in this list can only be removed.
          +optional
          +patchStrategy=merge
        items:
          type: string
        type: array
        x-go-name: Finalizers
      generateName:
        description: |-
          GenerateName is an optional prefix, used by the server, to generate a unique
          name ONLY IF the Name field has not been provided.
          If this field is used, the name returned to the client will be different
          than the name passed. This value will also be combined with a unique suffix.
          The provided value has the same validation rules as the Name field,
          and may be truncated by the length of the suffix required to make the value
          unique on the server.

          If this field is specified and the generated name exists, the server will
          NOT return a 409 - instead, it will either return 201 Created or 500 with Reason
          ServerTimeout indicating a unique name could not be found in the time allotted, and the client
          should retry (optionally after the time indicated in the Retry-After header).

          Applied only if Name is not specified.
          More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency
          +optional
        type: string
        x-go-name: GenerateName
      generation:
        description: |-
          A sequence number representing a specific generation of the desired state.
          Populated by the system. Read-only.
          +optional
        format: int64
        type: integer
        x-go-name: Generation
      initializers:
        $ref: '#/definitions/Initializers'
      kind:
        description: |-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to.
          Cannot be updated.
          In CamelCase.
          More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
          +optional
        type: string
        x-go-name: Kind
      labels:
        additionalProperties:
          type: string
        description: |-
          Map of string keys and values that can be used to organize and categorize
          (scope and select) objects. May match selectors of replication controllers
          and services.
          More info: http://kubernetes.io/docs/user-guide/labels
          +optional
        type: object
        x-go-name: Labels
      name:
        description: |-
          Name must be unique within a namespace. Is required when creating resources, although
          some resources may allow a client to request the generation of an appropriate name
          automatically. Name is primarily intended for creation idempotence and configuration
          definition.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/identifiers#names
          +optional
        type: string
        x-go-name: Name
      namespace:
        description: |-
          Namespace defines the space within each name must be unique. An empty namespace is
          equivalent to the "default" namespace, but "default" is the canonical representation.
          Not all objects are required to be scoped to a namespace - the value of this field for
          those objects will be empty.

          Must be a DNS_LABEL.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/namespaces
          +optional
        type: string
        x-go-name: Namespace
      ownerReferences:
        description: |-
          List of objects depended by this object. If ALL objects in the list have
          been deleted, this object will be garbage collected. If this object is managed by a controller,
          then an entry in this list will point to this controller, with the controller field set to true.
          There cannot be more than one managing controller.
          +optional
          +patchMergeKey=uid
          +patchStrategy=merge
        items:
          $ref: '#/definitions/OwnerReference'
        type: array
        x-go-name: OwnerReferences
      resourceVersion:
        description: |-
          An opaque value that represents the internal version of this object that can
          be used by clients to determine when objects have changed. May be used for optimistic
          concurrency, change detection, and the watch operation on a resource or set of resources.
          Clients must treat these values as opaque and passed unmodified back to the server.
          They may only be valid for a particular resource or set of resources.

          Populated by the system.
          Read-only.
          Value must be treated as opaque by clients and .
          More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
          +optional
        type: string
        x-go-name: ResourceVersion
      selfLink:
        description: |-
          SelfLink is a URL representing this object.
          Populated by the system.
          Read-only.
          +optional
        type: string
        x-go-name: SelfLink
      spec:
        $ref: '#/definitions/DeploymentSpec'
      status:
        $ref: '#/definitions/DeploymentStatus'
      uid:
        $ref: '#/definitions/UID'
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/apps/v1beta2
  DeploymentCondition:
    properties:
      lastTransitionTime:
        $ref: '#/definitions/Time'
      lastUpdateTime:
        $ref: '#/definitions/Time'
      message:
        description: A human readable message indicating details about the transition.
        type: string
        x-go-name: Message
      reason:
        description: The reason for the condition's last transition.
        type: string
        x-go-name: Reason
      status:
        $ref: '#/definitions/ConditionStatus'
      type:
        $ref: '#/definitions/DeploymentConditionType'
    title: DeploymentCondition describes the state of a deployment at a certain point.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/apps/v1beta2
  DeploymentConditionType:
    type: string
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/apps/v1beta2
  DeploymentSpec:
    properties:
      minReadySeconds:
        description: |-
          Minimum number of seconds for which a newly created pod should be ready
          without any of its container crashing, for it to be considered available.
          Defaults to 0 (pod will be considered available as soon as it is ready)
          +optional
        format: int32
        type: integer
        x-go-name: MinReadySeconds
      paused:
        description: |-
          Indicates that the deployment is paused.
          +optional
        type: boolean
        x-go-name: Paused
      progressDeadlineSeconds:
        description: |-
          The maximum time in seconds for a deployment to make progress before it
          is considered to be failed. The deployment controller will continue to
          process failed deployments and a condition with a ProgressDeadlineExceeded
          reason will be surfaced in the deployment status. Note that progress will
          not be estimated during the time a deployment is paused. Defaults to 600s.
        format: int32
        type: integer
        x-go-name: ProgressDeadlineSeconds
      replicas:
        description: |-
          Number of desired pods. This is a pointer to distinguish between explicit
          zero and not specified. Defaults to 1.
          +optional
        format: int32
        type: integer
        x-go-name: Replicas
      revisionHistoryLimit:
        description: |-
          The number of old ReplicaSets to retain to allow rollback.
          This is a pointer to distinguish between explicit zero and not specified.
          Defaults to 10.
          +optional
        format: int32
        type: integer
        x-go-name: RevisionHistoryLimit
      selector:
        $ref: '#/definitions/LabelSelector'
      strategy:
        $ref: '#/definitions/DeploymentStrategy'
      template:
        $ref: '#/definitions/PodTemplateSpec'
    title: DeploymentSpec is the specification of the desired behavior of the Deployment.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/apps/v1beta2
  DeploymentStatus:
    properties:
      availableReplicas:
        description: |-
          Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
          +optional
        format: int32
        type: integer
        x-go-name: AvailableReplicas
      collisionCount:
        description: |-
          Count of hash collisions for the Deployment. The Deployment controller uses this
          field as a collision avoidance mechanism when it needs to create the name for the
          newest ReplicaSet.
          +optional
        format: int32
        type: integer
        x-go-name: CollisionCount
      conditions:
        description: |-
          Represents the latest available observations of a deployment's current state.
          +patchMergeKey=type
          +patchStrategy=merge
        items:
          $ref: '#/definitions/DeploymentCondition'
        type: array
        x-go-name: Conditions
      observedGeneration:
        description: |-
          The generation observed by the deployment controller.
          +optional
        format: int64
        type: integer
        x-go-name: ObservedGeneration
      readyReplicas:
        description: |-
          Total number of ready pods targeted by this deployment.
          +optional
        format: int32
        type: integer
        x-go-name: ReadyReplicas
      replicas:
        description: |-
          Total number of non-terminated pods targeted by this deployment (their labels match the selector).
          +optional
        format: int32
        type: integer
        x-go-name: Replicas
      unavailableReplicas:
        description: |-
          Total number of unavailable pods targeted by this deployment. This is the total number of
          pods that are still required for the deployment to have 100% available capacity. They may
          either be pods that are running but not yet available or pods that still have not been created.
          +optional
        format: int32
        type: integer
        x-go-name: UnavailableReplicas
      updatedReplicas:
        description: |-
          Total number of non-terminated pods targeted by this deployment that have the desired template spec.
          +optional
        format: int32
        type: integer
        x-go-name: UpdatedReplicas
    title: DeploymentStatus is the most recently observed status of the Deployment.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/apps/v1beta2
  DeploymentStrategy:
    properties:
      rollingUpdate:
        $ref: '#/definitions/RollingUpdateDeployment'
      type:
        $ref: '#/definitions/DeploymentStrategyType'
    title: DeploymentStrategy describes how to replace existing pods with new ones.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/apps/v1beta2
  DeploymentStrategyType:
    type: string
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/apps/v1beta2
  DeploymentUpdateInput:
    properties:
      cluster:
        type: string
        x-go-name: Cluster
      containers:
        items:
          $ref: '#/definitions/ContainerUpdateInput'
        type: array
        x-go-name: Containers
      dnsPolicy:
        $ref: '#/definitions/DNSPolicy'
      initContainers:
        items:
          $ref: '#/definitions/ContainerUpdateInput'
        type: array
        x-go-name: InitContainers
      name:
        type: string
        x-go-name: Name
      namespace:
        type: string
        x-go-name: Namespace
      replicas:
        format: int32
        type: integer
        x-go-name: Replicas
      restartPolicy:
        $ref: '#/definitions/RestartPolicy'
    required:
    - cluster
    - name
    - namespace
    type: object
    x-go-package: yunion.io/x/yunion-kube/pkg/apis
  DiskConfig:
    properties:
      backend:
        type: string
        x-go-name: Backend
      cache:
        type: string
        x-go-name: Cache
      disk_id:
        type: string
        x-go-name: DiskId
      disk_type:
        type: string
        x-go-name: DiskType
      driver:
        type: string
        x-go-name: Driver
      format:
        type: string
        x-go-name: Format
      fs:
        type: string
        x-go-name: Fs
      image_id:
        type: string
        x-go-name: ImageId
      image_properties:
        additionalProperties:
          type: string
        type: object
        x-go-name: ImageProperties
      index:
        format: int64
        type: integer
        x-go-name: Index
      medium:
        type: string
        x-go-name: Medium
      mountpoint:
        type: string
        x-go-name: Mountpoint
      schedtags:
        items:
          $ref: '#/definitions/SchedtagConfig'
        type: array
        x-go-name: Schedtags
      size:
        format: int64
        type: integer
        x-go-name: SizeMb
      snapshot_id:
        type: string
        x-go-name: SnapshotId
      storage_id:
        type: string
        x-go-name: Storage
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/yunion.io/x/onecloud/pkg/apis/compute
  DownwardAPIProjection:
    description: |-
      Note that this is identical to a downwardAPI volume source without the default
      mode.
    properties:
      items:
        description: |-
          Items is a list of DownwardAPIVolume file
          +optional
        items:
          $ref: '#/definitions/DownwardAPIVolumeFile'
        type: array
        x-go-name: Items
    title: Represents downward API info for projecting into a projected volume.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  DownwardAPIVolumeFile:
    description: DownwardAPIVolumeFile represents information to create the file containing
      the pod field
    properties:
      fieldRef:
        $ref: '#/definitions/ObjectFieldSelector'
      mode:
        description: |-
          Optional: mode bits to use on this file, must be a value between 0
          and 0777. If not specified, the volume defaultMode will be used.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
        format: int32
        type: integer
        x-go-name: Mode
      path:
        description: 'Required: Path is  the relative path name of the file to be
          created. Must not be absolute or contain the ''..'' path. Must be utf-8
          encoded. The first item of the relative path must not start with ''..'''
        type: string
        x-go-name: Path
      resourceFieldRef:
        $ref: '#/definitions/ResourceFieldSelector'
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  DownwardAPIVolumeSource:
    description: Downward API volumes support ownership management and SELinux relabeling.
    properties:
      defaultMode:
        description: |-
          Optional: mode bits to use on created files by default. Must be a
          value between 0 and 0777. Defaults to 0644.
          Directories within the path are not affected by this setting.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
        format: int32
        type: integer
        x-go-name: DefaultMode
      items:
        description: |-
          Items is a list of downward API volume file
          +optional
        items:
          $ref: '#/definitions/DownwardAPIVolumeFile'
        type: array
        x-go-name: Items
    title: DownwardAPIVolumeSource represents a volume containing downward API info.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  EmptyDirVolumeSource:
    description: Empty directory volumes support ownership management and SELinux
      relabeling.
    properties:
      medium:
        $ref: '#/definitions/StorageMedium'
      sizeLimit:
        $ref: '#/definitions/Quantity'
    title: Represents an empty directory for a pod.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  EnvFromSource:
    description: EnvFromSource represents the source of a set of ConfigMaps
    properties:
      configMapRef:
        $ref: '#/definitions/ConfigMapEnvSource'
      prefix:
        description: |-
          An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
          +optional
        type: string
        x-go-name: Prefix
      secretRef:
        $ref: '#/definitions/SecretEnvSource'
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  EnvVar:
    properties:
      name:
        description: Name of the environment variable. Must be a C_IDENTIFIER.
        type: string
        x-go-name: Name
      value:
        description: |-
          Variable references $(VAR_NAME) are expanded
          using the previous defined environment variables in the container and
          any service environment variables. If a variable cannot be resolved,
          the reference in the input string will be unchanged. The $(VAR_NAME)
          syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped
          references will never be expanded, regardless of whether the variable
          exists or not.
          Defaults to "".
          +optional
        type: string
        x-go-name: Value
      valueFrom:
        $ref: '#/definitions/EnvVarSource'
    title: EnvVar represents an environment variable present in a Container.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  EnvVarSource:
    properties:
      configMapKeyRef:
        $ref: '#/definitions/ConfigMapKeySelector'
      fieldRef:
        $ref: '#/definitions/ObjectFieldSelector'
      resourceFieldRef:
        $ref: '#/definitions/ResourceFieldSelector'
      secretKeyRef:
        $ref: '#/definitions/SecretKeySelector'
    title: EnvVarSource represents a source for the value of an EnvVar.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  ExecAction:
    properties:
      command:
        description: |-
          Command is the command line to execute inside the container, the working directory for the
          command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
          not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
          a shell, you need to explicitly call out to that shell.
          Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
          +optional
        items:
          type: string
        type: array
        x-go-name: Command
    title: ExecAction describes a "run in container" action.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  FCVolumeSource:
    description: |-
      Fibre Channel volumes can only be mounted as read/write once.
      Fibre Channel volumes support ownership management and SELinux relabeling.
    properties:
      fsType:
        description: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          TODO: how do we prevent errors in the filesystem from compromising the machine
          +optional
        type: string
        x-go-name: FSType
      lun:
        description: |-
          Optional: FC target lun number
          +optional
        format: int32
        type: integer
        x-go-name: Lun
      readOnly:
        description: |-
          Optional: Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
        x-go-name: ReadOnly
      targetWWNs:
        description: |-
          Optional: FC target worldwide names (WWNs)
          +optional
        items:
          type: string
        type: array
        x-go-name: TargetWWNs
      wwids:
        description: |-
          Optional: FC volume world wide identifiers (wwids)
          Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
          +optional
        items:
          type: string
        type: array
        x-go-name: WWIDs
    title: Represents a Fibre Channel volume.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  FlexVolumeSource:
    description: |-
      FlexVolume represents a generic volume resource that is
      provisioned/attached using an exec based plugin.
    properties:
      driver:
        description: Driver is the name of the driver to use for this volume.
        type: string
        x-go-name: Driver
      fsType:
        description: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
          +optional
        type: string
        x-go-name: FSType
      options:
        additionalProperties:
          type: string
        description: |-
          Optional: Extra command options if any.
          +optional
        type: object
        x-go-name: Options
      readOnly:
        description: |-
          Optional: Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
        x-go-name: ReadOnly
      secretRef:
        $ref: '#/definitions/LocalObjectReference'
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  FlockerVolumeSource:
    description: |-
      One and only one of datasetName and datasetUUID should be set.
      Flocker volumes do not support ownership management or SELinux relabeling.
    properties:
      datasetName:
        description: |-
          Name of the dataset stored as metadata -> name on the dataset for Flocker
          should be considered as deprecated
          +optional
        type: string
        x-go-name: DatasetName
      datasetUUID:
        description: |-
          UUID of the dataset. This is unique identifier of a Flocker dataset
          +optional
        type: string
        x-go-name: DatasetUUID
    title: Represents a Flocker volume mounted by the Flocker agent.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  GCEPersistentDiskVolumeSource:
    description: |-
      A GCE PD must exist before mounting to a container. The disk must
      also be in the same GCE project and zone as the kubelet. A GCE PD
      can only be mounted as read/write once or read-only many times. GCE
      PDs support ownership management and SELinux relabeling.
    properties:
      fsType:
        description: |-
          Filesystem type of the volume that you want to mount.
          Tip: Ensure that the filesystem type is supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
          TODO: how do we prevent errors in the filesystem from compromising the machine
          +optional
        type: string
        x-go-name: FSType
      partition:
        description: |-
          The partition in the volume that you want to mount.
          If omitted, the default is to mount by volume name.
          Examples: For volume /dev/sda1, you specify the partition as "1".
          Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
          More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
          +optional
        format: int32
        type: integer
        x-go-name: Partition
      pdName:
        description: |-
          Unique name of the PD resource in GCE. Used to identify the disk in GCE.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        type: string
        x-go-name: PDName
      readOnly:
        description: |-
          ReadOnly here will force the ReadOnly setting in VolumeMounts.
          Defaults to false.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
          +optional
        type: boolean
        x-go-name: ReadOnly
    title: Represents a Persistent Disk resource in Google Compute Engine.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  GitRepoVolumeSource:
    description: |-
      DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an
      EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
      into the Pod's container.
    properties:
      directory:
        description: |-
          Target directory name.
          Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
          git repository.  Otherwise, if specified, the volume will contain the git repository in
          the subdirectory with the given name.
          +optional
        type: string
        x-go-name: Directory
      repository:
        description: Repository URL
        type: string
        x-go-name: Repository
      revision:
        description: |-
          Commit hash for the specified revision.
          +optional
        type: string
        x-go-name: Revision
    title: |-
      Represents a volume that is populated with the contents of a git repository.
      Git repo volumes do not support ownership management.
      Git repo volumes support SELinux relabeling.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  GlusterfsVolumeSource:
    description: Glusterfs volumes do not support ownership management or SELinux
      relabeling.
    properties:
      endpoints:
        description: |-
          EndpointsName is the endpoint name that details Glusterfs topology.
          More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod
        type: string
        x-go-name: EndpointsName
      path:
        description: |-
          Path is the Glusterfs volume path.
          More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod
        type: string
        x-go-name: Path
      readOnly:
        description: |-
          ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions.
          Defaults to false.
          More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod
          +optional
        type: boolean
        x-go-name: ReadOnly
    title: Represents a Glusterfs mount that lasts the lifetime of a pod.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  HTTPGetAction:
    properties:
      host:
        description: |-
          Host name to connect to, defaults to the pod IP. You probably want to set
          "Host" in httpHeaders instead.
          +optional
        type: string
        x-go-name: Host
      httpHeaders:
        description: |-
          Custom headers to set in the request. HTTP allows repeated headers.
          +optional
        items:
          $ref: '#/definitions/HTTPHeader'
        type: array
        x-go-name: HTTPHeaders
      path:
        description: |-
          Path to access on the HTTP server.
          +optional
        type: string
        x-go-name: Path
      port:
        $ref: '#/definitions/IntOrString'
      scheme:
        $ref: '#/definitions/URIScheme'
    title: HTTPGetAction describes an action based on HTTP Get requests.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  HTTPHeader:
    description: HTTPHeader describes a custom header to be used in HTTP probes
    properties:
      name:
        description: The header field name
        type: string
        x-go-name: Name
      value:
        description: The header field value
        type: string
        x-go-name: Value
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  Handler:
    description: |-
      Handler defines a specific action that should be taken
      TODO: pass structured data to these actions, and document that data here.
    properties:
      exec:
        $ref: '#/definitions/ExecAction'
      httpGet:
        $ref: '#/definitions/HTTPGetAction'
      tcpSocket:
        $ref: '#/definitions/TCPSocketAction'
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  HostAlias:
    description: |-
      HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the
      pod's hosts file.
    properties:
      hostnames:
        description: Hostnames for the above IP address.
        items:
          type: string
        type: array
        x-go-name: Hostnames
      ip:
        description: IP address of the host file entry.
        type: string
        x-go-name: IP
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  HostPathType:
    type: string
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  HostPathVolumeSource:
    description: Host path volumes do not support ownership management or SELinux
      relabeling.
    properties:
      path:
        description: |-
          Path of the directory on the host.
          If the path is a symlink, it will follow the link to the real path.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        type: string
        x-go-name: Path
      type:
        $ref: '#/definitions/HostPathType'
    title: Represents a host path mapped into a pod.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  ISCSIVolumeSource:
    description: |-
      ISCSI volumes can only be mounted as read/write once.
      ISCSI volumes support ownership management and SELinux relabeling.
    properties:
      chapAuthDiscovery:
        description: |-
          whether support iSCSI Discovery CHAP authentication
          +optional
        type: boolean
        x-go-name: DiscoveryCHAPAuth
      chapAuthSession:
        description: |-
          whether support iSCSI Session CHAP authentication
          +optional
        type: boolean
        x-go-name: SessionCHAPAuth
      fsType:
        description: |-
          Filesystem type of the volume that you want to mount.
          Tip: Ensure that the filesystem type is supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
          TODO: how do we prevent errors in the filesystem from compromising the machine
          +optional
        type: string
        x-go-name: FSType
      initiatorName:
        description: |-
          Custom iSCSI Initiator Name.
          If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
          <target portal>:<volume name> will be created for the connection.
          +optional
        type: string
        x-go-name: InitiatorName
      iqn:
        description: Target iSCSI Qualified Name.
        type: string
        x-go-name: IQN
      iscsiInterface:
        description: |-
          iSCSI Interface Name that uses an iSCSI transport.
          Defaults to 'default' (tcp).
          +optional
        type: string
        x-go-name: ISCSIInterface
      lun:
        description: iSCSI Target Lun number.
        format: int32
        type: integer
        x-go-name: Lun
      portals:
        description: |-
          iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
          is other than default (typically TCP ports 860 and 3260).
          +optional
        items:
          type: string
        type: array
        x-go-name: Portals
      readOnly:
        description: |-
          ReadOnly here will force the ReadOnly setting in VolumeMounts.
          Defaults to false.
          +optional
        type: boolean
        x-go-name: ReadOnly
      secretRef:
        $ref: '#/definitions/LocalObjectReference'
      targetPortal:
        description: |-
          iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
          is other than default (typically TCP ports 860 and 3260).
        type: string
        x-go-name: TargetPortal
    title: Represents an ISCSI disk.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  Initializer:
    properties:
      name:
        description: name of the process that is responsible for initializing this
          object.
        type: string
        x-go-name: Name
    title: Initializer is information about an initializer that has not yet completed.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/apimachinery/pkg/apis/meta/v1
  Initializers:
    properties:
      pending:
        description: |-
          Pending is a list of initializers that must execute in order before this object is visible.
          When the last pending initializer is removed, and no failing result is set, the initializers
          struct will be set to nil and the object is considered as initialized and visible to all
          clients.
          +patchMergeKey=name
          +patchStrategy=merge
        items:
          $ref: '#/definitions/Initializer'
        type: array
        x-go-name: Pending
      result:
        $ref: '#/definitions/Status'
    title: Initializers tracks the progress of initialization.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/apimachinery/pkg/apis/meta/v1
  IntOrString:
    description: |-
      +protobuf=true
      +protobuf.options.(gogoproto.goproto_stringer)=false
      +k8s:openapi-gen=true
    properties:
      IntVal:
        format: int32
        type: integer
      StrVal:
        type: string
      Type:
        $ref: '#/definitions/Type'
    title: |-
      IntOrString is a type that can hold an int32 or a string.  When used in
      JSON or YAML marshalling and unmarshalling, it produces or consumes the
      inner type.  This allows you to have, for example, a JSON field that can
      accept a name or number.
      TODO: Rename to Int32OrString
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/apimachinery/pkg/util/intstr
  IsolatedDeviceConfig:
    properties:
      dev_type:
        type: string
        x-go-name: DevType
      id:
        type: string
        x-go-name: Id
      index:
        format: int64
        type: integer
        x-go-name: Index
      model:
        type: string
        x-go-name: Model
      vendor:
        type: string
        x-go-name: Vendor
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/yunion.io/x/onecloud/pkg/apis/compute
  KeyToPath:
    properties:
      key:
        description: The key to project.
        type: string
        x-go-name: Key
      mode:
        description: |-
          Optional: mode bits to use on this file, must be a value between 0
          and 0777. If not specified, the volume defaultMode will be used.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
        format: int32
        type: integer
        x-go-name: Mode
      path:
        description: |-
          The relative path of the file to map the key to.
          May not be an absolute path.
          May not contain the path element '..'.
          May not start with the string '..'.
        type: string
        x-go-name: Path
    title: Maps a string key to a path within a volume.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  LabelSelector:
    description: |-
      A label selector is a label query over a set of resources. The result of matchLabels and
      matchExpressions are ANDed. An empty label selector matches all objects. A null
      label selector matches no objects.
    properties:
      matchExpressions:
        description: |-
          matchExpressions is a list of label selector requirements. The requirements are ANDed.
          +optional
        items:
          $ref: '#/definitions/LabelSelectorRequirement'
        type: array
        x-go-name: MatchExpressions
      matchLabels:
        additionalProperties:
          type: string
        description: |-
          matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
          map is equivalent to an element of matchExpressions, whose key field is "key", the
          operator is "In", and the values array contains only "value". The requirements are ANDed.
          +optional
        type: object
        x-go-name: MatchLabels
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/apimachinery/pkg/apis/meta/v1
  LabelSelectorOperator:
    title: A label selector operator is the set of operators that can be used in a
      selector requirement.
    type: string
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/apimachinery/pkg/apis/meta/v1
  LabelSelectorRequirement:
    description: |-
      A label selector requirement is a selector that contains values, a key, and an operator that
      relates the key and values.
    properties:
      key:
        description: |-
          key is the label key that the selector applies to.
          +patchMergeKey=key
          +patchStrategy=merge
        type: string
        x-go-name: Key
      operator:
        $ref: '#/definitions/LabelSelectorOperator'
      values:
        description: |-
          values is an array of string values. If the operator is In or NotIn,
          the values array must be non-empty. If the operator is Exists or DoesNotExist,
          the values array must be empty. This array is replaced during a strategic
          merge patch.
          +optional
        items:
          type: string
        type: array
        x-go-name: Values
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/apimachinery/pkg/apis/meta/v1
  Lifecycle:
    description: |-
      Lifecycle describes actions that the management system should take in response to container lifecycle
      events. For the PostStart and PreStop lifecycle handlers, management of the container blocks
      until the action is complete, unless the container process fails, in which case the handler is aborted.
    properties:
      postStart:
        $ref: '#/definitions/Handler'
      preStop:
        $ref: '#/definitions/Handler'
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  LocalObjectReference:
    description: |-
      LocalObjectReference contains enough information to let you locate the
      referenced object inside the same namespace.
    properties:
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
        x-go-name: Name
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  MachineCreateConfig:
    properties:
      vm:
        $ref: '#/definitions/MachineCreateVMConfig'
    type: object
    x-go-package: yunion.io/x/yunion-kube/pkg/apis
  MachineCreateVMConfig:
    properties:
      disks:
        items:
          $ref: '#/definitions/DiskConfig'
        type: array
        x-go-name: Disks
      hypervisor:
        type: string
        x-go-name: Hypervisor
      isolated_devices:
        items:
          $ref: '#/definitions/IsolatedDeviceConfig'
        type: array
        x-go-name: IsolatedDevices
      nets:
        items:
          $ref: '#/definitions/NetworkConfig'
        type: array
        x-go-name: Networks
      prefer_backup_host:
        type: string
        x-go-name: PreferBackupHost
      prefer_host_id:
        type: string
        x-go-name: PreferHost
      prefer_region_id:
        type: string
        x-go-name: PreferRegion
      prefer_wire_id:
        type: string
        x-go-name: PreferWire
      prefer_zone_id:
        type: string
        x-go-name: PreferZone
      schedtags:
        items:
          $ref: '#/definitions/SchedtagConfig'
        type: array
        x-go-name: Schedtags
      vcpu_count:
        format: int64
        type: integer
        x-go-name: VcpuCount
      vmem_size:
        format: int64
        type: integer
        x-go-name: VmemSize
    type: object
    x-go-package: yunion.io/x/yunion-kube/pkg/apis
  MountPropagationMode:
    title: MountPropagationMode describes mount propagation.
    type: string
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  NFSVolumeSource:
    description: NFS volumes do not support ownership management or SELinux relabeling.
    properties:
      path:
        description: |-
          Path that is exported by the NFS server.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        type: string
        x-go-name: Path
      readOnly:
        description: |-
          ReadOnly here will force
          the NFS export to be mounted with read-only permissions.
          Defaults to false.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
          +optional
        type: boolean
        x-go-name: ReadOnly
      server:
        description: |-
          Server is the hostname or IP address of the NFS server.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        type: string
        x-go-name: Server
    title: Represents an NFS mount that lasts the lifetime of a pod.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  NetworkConfig:
    properties:
      address:
        type: string
        x-go-name: Address
      address6:
        type: string
        x-go-name: Address6
      bw_limit:
        format: int64
        type: integer
        x-go-name: BwLimit
      domain_id:
        type: string
        x-go-name: Domain
      driver:
        type: string
        x-go-name: Driver
      exit:
        type: boolean
        x-go-name: Exit
      ifname:
        type: string
        x-go-name: Ifname
      index:
        format: int64
        type: integer
        x-go-name: Index
      mac:
        type: string
        x-go-name: Mac
      net_type:
        type: string
        x-go-name: NetType
      network:
        type: string
        x-go-name: Network
      private:
        type: boolean
        x-go-name: Private
      project_id:
        type: string
        x-go-name: Project
      require_designated_ip:
        type: boolean
        x-go-name: RequireDesignatedIP
      require_teaming:
        type: boolean
        x-go-name: RequireTeaming
      reserved:
        type: boolean
        x-go-name: Reserved
      schedtags:
        items:
          $ref: '#/definitions/SchedtagConfig'
        type: array
        x-go-name: Schedtags
      standby_addr_count:
        format: int64
        type: integer
        x-go-name: StandbyAddrCount
      standby_port_count:
        format: int64
        type: integer
        x-go-name: StandbyPortCount
      try_teaming:
        type: boolean
        x-go-name: TryTeaming
      vip:
        type: boolean
        x-go-name: Vip
      wire:
        type: string
        x-go-name: Wire
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/yunion.io/x/onecloud/pkg/apis/compute
  NodeAffinity:
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: |-
          The scheduler will prefer to schedule pods to nodes that satisfy
          the affinity expressions specified by this field, but it may choose
          a node that violates one or more of the expressions. The node that is
          most preferred is the one with the greatest sum of weights, i.e.
          for each node that meets all of the scheduling requirements (resource
          request, requiredDuringScheduling affinity expressions, etc.),
          compute a sum by iterating through the elements of this field and adding
          "weight" to the sum if the node matches the corresponding matchExpressions; the
          node(s) with the highest sum are the most preferred.
          +optional
        items:
          $ref: '#/definitions/PreferredSchedulingTerm'
        type: array
        x-go-name: PreferredDuringSchedulingIgnoredDuringExecution
      requiredDuringSchedulingIgnoredDuringExecution:
        $ref: '#/definitions/NodeSelector'
    title: Node affinity is a group of node affinity scheduling rules.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  NodeSelector:
    description: |-
      A node selector represents the union of the results of one or more label queries
      over a set of nodes; that is, it represents the OR of the selectors represented
      by the node selector terms.
    properties:
      nodeSelectorTerms:
        description: Required. A list of node selector terms. The terms are ORed.
        items:
          $ref: '#/definitions/NodeSelectorTerm'
        type: array
        x-go-name: NodeSelectorTerms
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  NodeSelectorOperator:
    description: |-
      A node selector operator is the set of operators that can be used in
      a node selector requirement.
    type: string
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  NodeSelectorRequirement:
    description: |-
      A node selector requirement is a selector that contains values, a key, and an operator
      that relates the key and values.
    properties:
      key:
        description: The label key that the selector applies to.
        type: string
        x-go-name: Key
      operator:
        $ref: '#/definitions/NodeSelectorOperator'
      values:
        description: |-
          An array of string values. If the operator is In or NotIn,
          the values array must be non-empty. If the operator is Exists or DoesNotExist,
          the values array must be empty. If the operator is Gt or Lt, the values
          array must have a single element, which will be interpreted as an integer.
          This array is replaced during a strategic merge patch.
          +optional
        items:
          type: string
        type: array
        x-go-name: Values
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  NodeSelectorTerm:
    description: |-
      A null or empty node selector term matches no objects. The requirements of
      them are ANDed.
      The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
    properties:
      matchExpressions:
        description: |-
          A list of node selector requirements by node's labels.
          +optional
        items:
          $ref: '#/definitions/NodeSelectorRequirement'
        type: array
        x-go-name: MatchExpressions
      matchFields:
        description: |-
          A list of node selector requirements by node's fields.
          +optional
        items:
          $ref: '#/definitions/NodeSelectorRequirement'
        type: array
        x-go-name: MatchFields
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  ObjectFieldSelector:
    properties:
      apiVersion:
        description: |-
          Version of the schema the FieldPath is written in terms of, defaults to "v1".
          +optional
        type: string
        x-go-name: APIVersion
      fieldPath:
        description: Path of the field to select in the specified API version.
        type: string
        x-go-name: FieldPath
    title: ObjectFieldSelector selects an APIVersioned field of an object.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  OwnerReference:
    description: |-
      OwnerReference contains enough information to let you identify an owning
      object. An owning object must be in the same namespace as the dependent, or
      be cluster-scoped, so there is no namespace field.
    properties:
      apiVersion:
        description: API version of the referent.
        type: string
        x-go-name: APIVersion
      blockOwnerDeletion:
        description: |-
          If true, AND if the owner has the "foregroundDeletion" finalizer, then
          the owner cannot be deleted from the key-value store until this
          reference is removed.
          Defaults to false.
          To set this field, a user needs "delete" permission of the owner,
          otherwise 422 (Unprocessable Entity) will be returned.
          +optional
        type: boolean
        x-go-name: BlockOwnerDeletion
      controller:
        description: |-
          If true, this reference points to the managing controller.
          +optional
        type: boolean
        x-go-name: Controller
      kind:
        description: |-
          Kind of the referent.
          More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
        type: string
        x-go-name: Kind
      name:
        description: |-
          Name of the referent.
          More info: http://kubernetes.io/docs/user-guide/identifiers#names
        type: string
        x-go-name: Name
      uid:
        $ref: '#/definitions/UID'
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/apimachinery/pkg/apis/meta/v1
  PersistentVolumeClaimVolumeSource:
    description: |-
      This volume finds the bound PV and mounts that volume for the pod. A
      PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another
      type of volume that is owned by someone else (the system).
    properties:
      claimName:
        description: |-
          ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        type: string
        x-go-name: ClaimName
      readOnly:
        description: |-
          Will force the ReadOnly setting in VolumeMounts.
          Default false.
          +optional
        type: boolean
        x-go-name: ReadOnly
    title: PersistentVolumeClaimVolumeSource references the user's PVC in the same
      namespace.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  PhotonPersistentDiskVolumeSource:
    properties:
      fsType:
        description: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        type: string
        x-go-name: FSType
      pdID:
        description: ID that identifies Photon Controller persistent disk
        type: string
        x-go-name: PdID
    title: Represents a Photon Controller persistent disk resource.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  Pod:
    description: |-
      Pod is a collection of containers that can run on a host. This resource is created
      by clients and scheduled onto hosts.
    properties:
      annotations:
        additionalProperties:
          type: string
        description: |-
          Annotations is an unstructured key value map stored with a resource that may be
          set by external tools to store and retrieve arbitrary metadata. They are not
          queryable and should be preserved when modifying objects.
          More info: http://kubernetes.io/docs/user-guide/annotations
          +optional
        type: object
        x-go-name: Annotations
      apiVersion:
        description: |-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and
          may reject unrecognized values.
          More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
          +optional
        type: string
        x-go-name: APIVersion
      clusterName:
        description: |-
          The name of the cluster which the object belongs to.
          This is used to distinguish resources with same name and namespace in different clusters.
          This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
          +optional
        type: string
        x-go-name: ClusterName
      creationTimestamp:
        $ref: '#/definitions/Time'
      deletionGracePeriodSeconds:
        description: |-
          Number of seconds allowed for this object to gracefully terminate before
          it will be removed from the system. Only set when deletionTimestamp is also set.
          May only be shortened.
          Read-only.
          +optional
        format: int64
        type: integer
        x-go-name: DeletionGracePeriodSeconds
      deletionTimestamp:
        $ref: '#/definitions/Time'
      finalizers:
        description: |-
          Must be empty before the object is deleted from the registry. Each entry
          is an identifier for the responsible component that will remove the entry
          from the list. If the deletionTimestamp of the object is non-nil, entries
          in this list can only be removed.
          +optional
          +patchStrategy=merge
        items:
          type: string
        type: array
        x-go-name: Finalizers
      generateName:
        description: |-
          GenerateName is an optional prefix, used by the server, to generate a unique
          name ONLY IF the Name field has not been provided.
          If this field is used, the name returned to the client will be different
          than the name passed. This value will also be combined with a unique suffix.
          The provided value has the same validation rules as the Name field,
          and may be truncated by the length of the suffix required to make the value
          unique on the server.

          If this field is specified and the generated name exists, the server will
          NOT return a 409 - instead, it will either return 201 Created or 500 with Reason
          ServerTimeout indicating a unique name could not be found in the time allotted, and the client
          should retry (optionally after the time indicated in the Retry-After header).

          Applied only if Name is not specified.
          More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency
          +optional
        type: string
        x-go-name: GenerateName
      generation:
        description: |-
          A sequence number representing a specific generation of the desired state.
          Populated by the system. Read-only.
          +optional
        format: int64
        type: integer
        x-go-name: Generation
      initializers:
        $ref: '#/definitions/Initializers'
      kind:
        description: |-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to.
          Cannot be updated.
          In CamelCase.
          More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
          +optional
        type: string
        x-go-name: Kind
      labels:
        additionalProperties:
          type: string
        description: |-
          Map of string keys and values that can be used to organize and categorize
          (scope and select) objects. May match selectors of replication controllers
          and services.
          More info: http://kubernetes.io/docs/user-guide/labels
          +optional
        type: object
        x-go-name: Labels
      name:
        description: |-
          Name must be unique within a namespace. Is required when creating resources, although
          some resources may allow a client to request the generation of an appropriate name
          automatically. Name is primarily intended for creation idempotence and configuration
          definition.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/identifiers#names
          +optional
        type: string
        x-go-name: Name
      namespace:
        description: |-
          Namespace defines the space within each name must be unique. An empty namespace is
          equivalent to the "default" namespace, but "default" is the canonical representation.
          Not all objects are required to be scoped to a namespace - the value of this field for
          those objects will be empty.

          Must be a DNS_LABEL.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/namespaces
          +optional
        type: string
        x-go-name: Namespace
      ownerReferences:
        description: |-
          List of objects depended by this object. If ALL objects in the list have
          been deleted, this object will be garbage collected. If this object is managed by a controller,
          then an entry in this list will point to this controller, with the controller field set to true.
          There cannot be more than one managing controller.
          +optional
          +patchMergeKey=uid
          +patchStrategy=merge
        items:
          $ref: '#/definitions/OwnerReference'
        type: array
        x-go-name: OwnerReferences
      resourceVersion:
        description: |-
          An opaque value that represents the internal version of this object that can
          be used by clients to determine when objects have changed. May be used for optimistic
          concurrency, change detection, and the watch operation on a resource or set of resources.
          Clients must treat these values as opaque and passed unmodified back to the server.
          They may only be valid for a particular resource or set of resources.

          Populated by the system.
          Read-only.
          Value must be treated as opaque by clients and .
          More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
          +optional
        type: string
        x-go-name: ResourceVersion
      selfLink:
        description: |-
          SelfLink is a URL representing this object.
          Populated by the system.
          Read-only.
          +optional
        type: string
        x-go-name: SelfLink
      spec:
        $ref: '#/definitions/PodSpec'
      status:
        $ref: '#/definitions/PodStatus'
      uid:
        $ref: '#/definitions/UID'
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  PodAffinity:
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: |-
          The scheduler will prefer to schedule pods to nodes that satisfy
          the affinity expressions specified by this field, but it may choose
          a node that violates one or more of the expressions. The node that is
          most preferred is the one with the greatest sum of weights, i.e.
          for each node that meets all of the scheduling requirements (resource
          request, requiredDuringScheduling affinity expressions, etc.),
          compute a sum by iterating through the elements of this field and adding
          "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
          node(s) with the highest sum are the most preferred.
          +optional
        items:
          $ref: '#/definitions/WeightedPodAffinityTerm'
        type: array
        x-go-name: PreferredDuringSchedulingIgnoredDuringExecution
      requiredDuringSchedulingIgnoredDuringExecution:
        description: |-
          If the affinity requirements specified by this field are not met at
          scheduling time, the pod will not be scheduled onto the node.
          If the affinity requirements specified by this field cease to be met
          at some point during pod execution (e.g. due to a pod label update), the
          system may or may not try to eventually evict the pod from its node.
          When there are multiple elements, the lists of nodes corresponding to each
          podAffinityTerm are intersected, i.e. all terms must be satisfied.
          +optional
        items:
          $ref: '#/definitions/PodAffinityTerm'
        type: array
        x-go-name: RequiredDuringSchedulingIgnoredDuringExecution
    title: Pod affinity is a group of inter pod affinity scheduling rules.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  PodAffinityTerm:
    description: |-
      Defines a set of pods (namely those matching the labelSelector
      relative to the given namespace(s)) that this pod should be
      co-located (affinity) or not co-located (anti-affinity) with,
      where co-located is defined as running on a node whose value of
      the label with key <topologyKey> matches that of any node on which
      a pod of the set of pods is running
    properties:
      labelSelector:
        $ref: '#/definitions/LabelSelector'
      namespaces:
        description: |-
          namespaces specifies which namespaces the labelSelector applies to (matches against);
          null or empty list means "this pod's namespace"
          +optional
        items:
          type: string
        type: array
        x-go-name: Namespaces
      topologyKey:
        description: |-
          This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
          the labelSelector in the specified namespaces, where co-located is defined as running on a node
          whose value of the label with key topologyKey matches that of any node on which any of the
          selected pods is running.
          Empty topologyKey is not allowed.
        type: string
        x-go-name: TopologyKey
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  PodAntiAffinity:
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: |-
          The scheduler will prefer to schedule pods to nodes that satisfy
          the anti-affinity expressions specified by this field, but it may choose
          a node that violates one or more of the expressions. The node that is
          most preferred is the one with the greatest sum of weights, i.e.
          for each node that meets all of the scheduling requirements (resource
          request, requiredDuringScheduling anti-affinity expressions, etc.),
          compute a sum by iterating through the elements of this field and adding
          "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
          node(s) with the highest sum are the most preferred.
          +optional
        items:
          $ref: '#/definitions/WeightedPodAffinityTerm'
        type: array
        x-go-name: PreferredDuringSchedulingIgnoredDuringExecution
      requiredDuringSchedulingIgnoredDuringExecution:
        description: |-
          If the anti-affinity requirements specified by this field are not met at
          scheduling time, the pod will not be scheduled onto the node.
          If the anti-affinity requirements specified by this field cease to be met
          at some point during pod execution (e.g. due to a pod label update), the
          system may or may not try to eventually evict the pod from its node.
          When there are multiple elements, the lists of nodes corresponding to each
          podAffinityTerm are intersected, i.e. all terms must be satisfied.
          +optional
        items:
          $ref: '#/definitions/PodAffinityTerm'
        type: array
        x-go-name: RequiredDuringSchedulingIgnoredDuringExecution
    title: Pod anti affinity is a group of inter pod anti affinity scheduling rules.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  PodCondition:
    properties:
      lastProbeTime:
        $ref: '#/definitions/Time'
      lastTransitionTime:
        $ref: '#/definitions/Time'
      message:
        description: |-
          Human-readable message indicating details about last transition.
          +optional
        type: string
        x-go-name: Message
      reason:
        description: |-
          Unique, one-word, CamelCase reason for the condition's last transition.
          +optional
        type: string
        x-go-name: Reason
      status:
        $ref: '#/definitions/ConditionStatus'
      type:
        $ref: '#/definitions/PodConditionType'
    title: PodCondition contains details for the current condition of this pod.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  PodConditionType:
    description: PodConditionType is a valid value for PodCondition.Type
    type: string
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  PodDNSConfig:
    description: |-
      PodDNSConfig defines the DNS parameters of a pod in addition to
      those generated from DNSPolicy.
    properties:
      nameservers:
        description: |-
          A list of DNS name server IP addresses.
          This will be appended to the base nameservers generated from DNSPolicy.
          Duplicated nameservers will be removed.
          +optional
        items:
          type: string
        type: array
        x-go-name: Nameservers
      options:
        description: |-
          A list of DNS resolver options.
          This will be merged with the base options generated from DNSPolicy.
          Duplicated entries will be removed. Resolution options given in Options
          will override those that appear in the base DNSPolicy.
          +optional
        items:
          $ref: '#/definitions/PodDNSConfigOption'
        type: array
        x-go-name: Options
      searches:
        description: |-
          A list of DNS search domains for host-name lookup.
          This will be appended to the base search paths generated from DNSPolicy.
          Duplicated search paths will be removed.
          +optional
        items:
          type: string
        type: array
        x-go-name: Searches
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  PodDNSConfigOption:
    properties:
      name:
        description: Required.
        type: string
        x-go-name: Name
      value:
        description: +optional
        type: string
        x-go-name: Value
    title: PodDNSConfigOption defines DNS resolver options of a pod.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  PodPhase:
    title: PodPhase is a label for the condition of a pod at the current time.
    type: string
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  PodQOSClass:
    title: PodQOSClass defines the supported qos classes of Pods.
    type: string
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  PodReadinessGate:
    description: PodReadinessGate contains the reference to a pod condition
    properties:
      conditionType:
        $ref: '#/definitions/PodConditionType'
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  PodSecurityContext:
    description: |-
      Some fields are also present in container.securityContext.  Field values of
      container.securityContext take precedence over field values of PodSecurityContext.
    properties:
      fsGroup:
        description: |-
          A special supplemental group that applies to all containers in a pod.
          Some volume types allow the Kubelet to change the ownership of that volume
          to be owned by the pod:

          1. The owning GID will be the FSGroup
          2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
          3. The permission bits are OR'd with rw-rw----

          If unset, the Kubelet will not modify the ownership and permissions of any volume.
          +optional
        format: int64
        type: integer
        x-go-name: FSGroup
      runAsGroup:
        description: |-
          The GID to run the entrypoint of the container process.
          Uses runtime default if unset.
          May also be set in SecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence
          for that container.
          +optional
        format: int64
        type: integer
        x-go-name: RunAsGroup
      runAsNonRoot:
        description: |-
          Indicates that the container must run as a non-root user.
          If true, the Kubelet will validate the image at runtime to ensure that it
          does not run as UID 0 (root) and fail to start the container if it does.
          If unset or false, no such validation will be performed.
          May also be set in SecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          +optional
        type: boolean
        x-go-name: RunAsNonRoot
      runAsUser:
        description: |-
          The UID to run the entrypoint of the container process.
          Defaults to user specified in image metadata if unspecified.
          May also be set in SecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence
          for that container.
          +optional
        format: int64
        type: integer
        x-go-name: RunAsUser
      seLinuxOptions:
        $ref: '#/definitions/SELinuxOptions'
      supplementalGroups:
        description: |-
          A list of groups applied to the first process run in each container, in addition
          to the container's primary GID.  If unspecified, no groups will be added to
          any container.
          +optional
        items:
          format: int64
          type: integer
        type: array
        x-go-name: SupplementalGroups
      sysctls:
        description: |-
          Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
          sysctls (by the container runtime) might fail to launch.
          +optional
        items:
          $ref: '#/definitions/Sysctl'
        type: array
        x-go-name: Sysctls
    title: PodSecurityContext holds pod-level security attributes and common container
      settings.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  PodSpec:
    properties:
      activeDeadlineSeconds:
        description: |-
          Optional duration in seconds the pod may be active on the node relative to
          StartTime before the system will actively try to mark it failed and kill associated containers.
          Value must be a positive integer.
          +optional
        format: int64
        type: integer
        x-go-name: ActiveDeadlineSeconds
      affinity:
        $ref: '#/definitions/Affinity'
      automountServiceAccountToken:
        description: |-
          AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
          +optional
        type: boolean
        x-go-name: AutomountServiceAccountToken
      containers:
        description: |-
          List of containers belonging to the pod.
          Containers cannot currently be added or removed.
          There must be at least one container in a Pod.
          Cannot be updated.
          +patchMergeKey=name
          +patchStrategy=merge
        items:
          $ref: '#/definitions/Container'
        type: array
        x-go-name: Containers
      dnsConfig:
        $ref: '#/definitions/PodDNSConfig'
      dnsPolicy:
        $ref: '#/definitions/DNSPolicy'
      enableServiceLinks:
        description: |-
          EnableServiceLinks indicates whether information about services should be injected into pod's
          environment variables, matching the syntax of Docker links.
          +optional
        type: boolean
        x-go-name: EnableServiceLinks
      hostAliases:
        description: |-
          HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts
          file if specified. This is only valid for non-hostNetwork pods.
          +optional
          +patchMergeKey=ip
          +patchStrategy=merge
        items:
          $ref: '#/definitions/HostAlias'
        type: array
        x-go-name: HostAliases
      hostIPC:
        description: |-
          Use the host's ipc namespace.
          Optional: Default to false.
          +k8s:conversion-gen=false
          +optional
        type: boolean
        x-go-name: HostIPC
      hostNetwork:
        description: |-
          Host networking requested for this pod. Use the host's network namespace.
          If this option is set, the ports that will be used must be specified.
          Default to false.
          +k8s:conversion-gen=false
          +optional
        type: boolean
        x-go-name: HostNetwork
      hostPID:
        description: |-
          Use the host's pid namespace.
          Optional: Default to false.
          +k8s:conversion-gen=false
          +optional
        type: boolean
        x-go-name: HostPID
      hostname:
        description: |-
          Specifies the hostname of the Pod
          If not specified, the pod's hostname will be set to a system-defined value.
          +optional
        type: string
        x-go-name: Hostname
      imagePullSecrets:
        description: |-
          ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec.
          If specified, these secrets will be passed to individual puller implementations for them to use. For example,
          in the case of docker, only DockerConfig type secrets are honored.
          More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
          +optional
          +patchMergeKey=name
          +patchStrategy=merge
        items:
          $ref: '#/definitions/LocalObjectReference'
        type: array
        x-go-name: ImagePullSecrets
      initContainers:
        description: |-
          List of initialization containers belonging to the pod.
          Init containers are executed in order prior to containers being started. If any
          init container fails, the pod is considered to have failed and is handled according
          to its restartPolicy. The name for an init container or normal container must be
          unique among all containers.
          Init containers may not have Lifecycle actions, Readiness probes, or Liveness probes.
          The resourceRequirements of an init container are taken into account during scheduling
          by finding the highest request/limit for each resource type, and then using the max of
          of that value or the sum of the normal containers. Limits are applied to init containers
          in a similar fashion.
          Init containers cannot currently be added or removed.
          Cannot be updated.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
          +patchMergeKey=name
          +patchStrategy=merge
        items:
          $ref: '#/definitions/Container'
        type: array
        x-go-name: InitContainers
      nodeName:
        description: |-
          NodeName is a request to schedule this pod onto a specific node. If it is non-empty,
          the scheduler simply schedules this pod onto that node, assuming that it fits resource
          requirements.
          +optional
        type: string
        x-go-name: NodeName
      nodeSelector:
        additionalProperties:
          type: string
        description: |-
          NodeSelector is a selector which must be true for the pod to fit on a node.
          Selector which must match a node's labels for the pod to be scheduled on that node.
          More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
          +optional
        type: object
        x-go-name: NodeSelector
      priority:
        description: |-
          The priority value. Various system components use this field to find the
          priority of the pod. When Priority Admission Controller is enabled, it
          prevents users from setting this field. The admission controller populates
          this field from PriorityClassName.
          The higher the value, the higher the priority.
          +optional
        format: int32
        type: integer
        x-go-name: Priority
      priorityClassName:
        description: |-
          If specified, indicates the pod's priority. "system-node-critical" and
          "system-cluster-critical" are two special keywords which indicate the
          highest priorities with the former being the highest priority. Any other
          name must be defined by creating a PriorityClass object with that name.
          If not specified, the pod priority will be default or zero if there is no
          default.
          +optional
        type: string
        x-go-name: PriorityClassName
      readinessGates:
        description: |-
          If specified, all readiness gates will be evaluated for pod readiness.
          A pod is ready when all its containers are ready AND
          all conditions specified in the readiness gates have status equal to "True"
          More info: https://github.com/kubernetes/community/blob/master/keps/sig-network/0007-pod-ready%2B%2B.md
          +optional
        items:
          $ref: '#/definitions/PodReadinessGate'
        type: array
        x-go-name: ReadinessGates
      restartPolicy:
        $ref: '#/definitions/RestartPolicy'
      runtimeClassName:
        description: |-
          RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used
          to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run.
          If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an
          empty definition that uses the default runtime handler.
          More info: https://github.com/kubernetes/community/blob/master/keps/sig-node/0014-runtime-class.md
          This is an alpha feature and may change in the future.
          +optional
        type: string
        x-go-name: RuntimeClassName
      schedulerName:
        description: |-
          If specified, the pod will be dispatched by specified scheduler.
          If not specified, the pod will be dispatched by default scheduler.
          +optional
        type: string
        x-go-name: SchedulerName
      securityContext:
        $ref: '#/definitions/PodSecurityContext'
      serviceAccount:
        description: |-
          DeprecatedServiceAccount is a depreciated alias for ServiceAccountName.
          Deprecated: Use serviceAccountName instead.
          +k8s:conversion-gen=false
          +optional
        type: string
        x-go-name: DeprecatedServiceAccount
      serviceAccountName:
        description: |-
          ServiceAccountName is the name of the ServiceAccount to use to run this pod.
          More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
          +optional
        type: string
        x-go-name: ServiceAccountName
      shareProcessNamespace:
        description: |-
          Share a single process namespace between all of the containers in a pod.
          When this is set containers will be able to view and signal processes from other containers
          in the same pod, and the first process in each container will not be assigned PID 1.
          HostPID and ShareProcessNamespace cannot both be set.
          Optional: Default to false.
          This field is beta-level and may be disabled with the PodShareProcessNamespace feature.
          +k8s:conversion-gen=false
          +optional
        type: boolean
        x-go-name: ShareProcessNamespace
      subdomain:
        description: |-
          If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>".
          If not specified, the pod will not have a domainname at all.
          +optional
        type: string
        x-go-name: Subdomain
      terminationGracePeriodSeconds:
        description: |-
          Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request.
          Value must be non-negative integer. The value zero indicates delete immediately.
          If this value is nil, the default grace period will be used instead.
          The grace period is the duration in seconds after the processes running in the pod are sent
          a termination signal and the time when the processes are forcibly halted with a kill signal.
          Set this value longer than the expected cleanup time for your process.
          Defaults to 30 seconds.
          +optional
        format: int64
        type: integer
        x-go-name: TerminationGracePeriodSeconds
      tolerations:
        description: |-
          If specified, the pod's tolerations.
          +optional
        items:
          $ref: '#/definitions/Toleration'
        type: array
        x-go-name: Tolerations
      volumes:
        description: |-
          List of volumes that can be mounted by containers belonging to the pod.
          More info: https://kubernetes.io/docs/concepts/storage/volumes
          +optional
          +patchMergeKey=name
          +patchStrategy=merge,retainKeys
        items:
          $ref: '#/definitions/Volume'
        type: array
        x-go-name: Volumes
    title: PodSpec is a description of a pod.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  PodStatus:
    description: |-
      PodStatus represents information about the status of a pod. Status may trail the actual
      state of a system, especially if the node that hosts the pod cannot contact the control
      plane.
    properties:
      conditions:
        description: |-
          Current service state of pod.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
          +optional
          +patchMergeKey=type
          +patchStrategy=merge
        items:
          $ref: '#/definitions/PodCondition'
        type: array
        x-go-name: Conditions
      containerStatuses:
        description: |-
          The list has one entry per container in the manifest. Each entry is currently the output
          of `docker inspect`.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
          +optional
        items:
          $ref: '#/definitions/ContainerStatus'
        type: array
        x-go-name: ContainerStatuses
      hostIP:
        description: |-
          IP address of the host to which the pod is assigned. Empty if not yet scheduled.
          +optional
        type: string
        x-go-name: HostIP
      initContainerStatuses:
        description: |-
          The list has one entry per init container in the manifest. The most recent successful
          init container will have ready = true, the most recently started container will have
          startTime set.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
        items:
          $ref: '#/definitions/ContainerStatus'
        type: array
        x-go-name: InitContainerStatuses
      message:
        description: |-
          A human readable message indicating details about why the pod is in this condition.
          +optional
        type: string
        x-go-name: Message
      nominatedNodeName:
        description: |-
          nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be
          scheduled right away as preemption victims receive their graceful termination periods.
          This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide
          to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to
          give the resources on this node to a higher priority pod that is created after preemption.
          As a result, this field may be different than PodSpec.nodeName when the pod is
          scheduled.
          +optional
        type: string
        x-go-name: NominatedNodeName
      phase:
        $ref: '#/definitions/PodPhase'
      podIP:
        description: |-
          IP address allocated to the pod. Routable at least within the cluster.
          Empty if not yet allocated.
          +optional
        type: string
        x-go-name: PodIP
      qosClass:
        $ref: '#/definitions/PodQOSClass'
      reason:
        description: |-
          A brief CamelCase message indicating details about why the pod is in this state.
          e.g. 'Evicted'
          +optional
        type: string
        x-go-name: Reason
      startTime:
        $ref: '#/definitions/Time'
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  PodTemplateSpec:
    description: PodTemplateSpec describes the data a pod should have when created
      from a template
    properties:
      annotations:
        additionalProperties:
          type: string
        description: |-
          Annotations is an unstructured key value map stored with a resource that may be
          set by external tools to store and retrieve arbitrary metadata. They are not
          queryable and should be preserved when modifying objects.
          More info: http://kubernetes.io/docs/user-guide/annotations
          +optional
        type: object
        x-go-name: Annotations
      clusterName:
        description: |-
          The name of the cluster which the object belongs to.
          This is used to distinguish resources with same name and namespace in different clusters.
          This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
          +optional
        type: string
        x-go-name: ClusterName
      creationTimestamp:
        $ref: '#/definitions/Time'
      deletionGracePeriodSeconds:
        description: |-
          Number of seconds allowed for this object to gracefully terminate before
          it will be removed from the system. Only set when deletionTimestamp is also set.
          May only be shortened.
          Read-only.
          +optional
        format: int64
        type: integer
        x-go-name: DeletionGracePeriodSeconds
      deletionTimestamp:
        $ref: '#/definitions/Time'
      finalizers:
        description: |-
          Must be empty before the object is deleted from the registry. Each entry
          is an identifier for the responsible component that will remove the entry
          from the list. If the deletionTimestamp of the object is non-nil, entries
          in this list can only be removed.
          +optional
          +patchStrategy=merge
        items:
          type: string
        type: array
        x-go-name: Finalizers
      generateName:
        description: |-
          GenerateName is an optional prefix, used by the server, to generate a unique
          name ONLY IF the Name field has not been provided.
          If this field is used, the name returned to the client will be different
          than the name passed. This value will also be combined with a unique suffix.
          The provided value has the same validation rules as the Name field,
          and may be truncated by the length of the suffix required to make the value
          unique on the server.

          If this field is specified and the generated name exists, the server will
          NOT return a 409 - instead, it will either return 201 Created or 500 with Reason
          ServerTimeout indicating a unique name could not be found in the time allotted, and the client
          should retry (optionally after the time indicated in the Retry-After header).

          Applied only if Name is not specified.
          More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency
          +optional
        type: string
        x-go-name: GenerateName
      generation:
        description: |-
          A sequence number representing a specific generation of the desired state.
          Populated by the system. Read-only.
          +optional
        format: int64
        type: integer
        x-go-name: Generation
      initializers:
        $ref: '#/definitions/Initializers'
      labels:
        additionalProperties:
          type: string
        description: |-
          Map of string keys and values that can be used to organize and categorize
          (scope and select) objects. May match selectors of replication controllers
          and services.
          More info: http://kubernetes.io/docs/user-guide/labels
          +optional
        type: object
        x-go-name: Labels
      name:
        description: |-
          Name must be unique within a namespace. Is required when creating resources, although
          some resources may allow a client to request the generation of an appropriate name
          automatically. Name is primarily intended for creation idempotence and configuration
          definition.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/identifiers#names
          +optional
        type: string
        x-go-name: Name
      namespace:
        description: |-
          Namespace defines the space within each name must be unique. An empty namespace is
          equivalent to the "default" namespace, but "default" is the canonical representation.
          Not all objects are required to be scoped to a namespace - the value of this field for
          those objects will be empty.

          Must be a DNS_LABEL.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/namespaces
          +optional
        type: string
        x-go-name: Namespace
      ownerReferences:
        description: |-
          List of objects depended by this object. If ALL objects in the list have
          been deleted, this object will be garbage collected. If this object is managed by a controller,
          then an entry in this list will point to this controller, with the controller field set to true.
          There cannot be more than one managing controller.
          +optional
          +patchMergeKey=uid
          +patchStrategy=merge
        items:
          $ref: '#/definitions/OwnerReference'
        type: array
        x-go-name: OwnerReferences
      resourceVersion:
        description: |-
          An opaque value that represents the internal version of this object that can
          be used by clients to determine when objects have changed. May be used for optimistic
          concurrency, change detection, and the watch operation on a resource or set of resources.
          Clients must treat these values as opaque and passed unmodified back to the server.
          They may only be valid for a particular resource or set of resources.

          Populated by the system.
          Read-only.
          Value must be treated as opaque by clients and .
          More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
          +optional
        type: string
        x-go-name: ResourceVersion
      selfLink:
        description: |-
          SelfLink is a URL representing this object.
          Populated by the system.
          Read-only.
          +optional
        type: string
        x-go-name: SelfLink
      spec:
        $ref: '#/definitions/PodSpec'
      uid:
        $ref: '#/definitions/UID'
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  PortworxVolumeSource:
    properties:
      fsType:
        description: |-
          FSType represents the filesystem type to mount
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
        type: string
        x-go-name: FSType
      readOnly:
        description: |-
          Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
        x-go-name: ReadOnly
      volumeID:
        description: VolumeID uniquely identifies a Portworx volume
        type: string
        x-go-name: VolumeID
    title: PortworxVolumeSource represents a Portworx volume resource.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  PreferredSchedulingTerm:
    description: |-
      An empty preferred scheduling term matches all objects with implicit weight 0
      (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
    properties:
      preference:
        $ref: '#/definitions/NodeSelectorTerm'
      weight:
        description: Weight associated with matching the corresponding nodeSelectorTerm,
          in the range 1-100.
        format: int32
        type: integer
        x-go-name: Weight
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  Probe:
    description: |-
      Probe describes a health check to be performed against a container to determine whether it is
      alive or ready to receive traffic.
    properties:
      exec:
        $ref: '#/definitions/ExecAction'
      failureThreshold:
        description: |-
          Minimum consecutive failures for the probe to be considered failed after having succeeded.
          Defaults to 3. Minimum value is 1.
          +optional
        format: int32
        type: integer
        x-go-name: FailureThreshold
      httpGet:
        $ref: '#/definitions/HTTPGetAction'
      initialDelaySeconds:
        description: |-
          Number of seconds after the container has started before liveness probes are initiated.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
          +optional
        format: int32
        type: integer
        x-go-name: InitialDelaySeconds
      periodSeconds:
        description: |-
          How often (in seconds) to perform the probe.
          Default to 10 seconds. Minimum value is 1.
          +optional
        format: int32
        type: integer
        x-go-name: PeriodSeconds
      successThreshold:
        description: |-
          Minimum consecutive successes for the probe to be considered successful after having failed.
          Defaults to 1. Must be 1 for liveness. Minimum value is 1.
          +optional
        format: int32
        type: integer
        x-go-name: SuccessThreshold
      tcpSocket:
        $ref: '#/definitions/TCPSocketAction'
      timeoutSeconds:
        description: |-
          Number of seconds after which the probe times out.
          Defaults to 1 second. Minimum value is 1.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
          +optional
        format: int32
        type: integer
        x-go-name: TimeoutSeconds
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  ProcMountType:
    type: string
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  ProjectedVolumeSource:
    description: Represents a projected volume source
    properties:
      defaultMode:
        description: |-
          Mode bits to use on created files by default. Must be a value between
          0 and 0777.
          Directories within the path are not affected by this setting.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
        format: int32
        type: integer
        x-go-name: DefaultMode
      sources:
        description: list of volume projections
        items:
          $ref: '#/definitions/VolumeProjection'
        type: array
        x-go-name: Sources
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  Protocol:
    title: Protocol defines network protocols supported for things like container
      ports.
    type: string
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  PullPolicy:
    description: PullPolicy describes a policy for if/when to pull a container image
    type: string
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  Quantity:
    description: |-
      The serialization format is:

      <quantity>        ::= <signedNumber><suffix>
      (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
      <digit>           ::= 0 | 1 | ... | 9
      <digits>          ::= <digit> | <digit><digits>
      <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits>
      <sign>            ::= "+" | "-"
      <signedNumber>    ::= <number> | <sign><number>
      <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI>
      <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
      (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
      <decimalSI>       ::= m | "" | k | M | G | T | P | E
      (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
      <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

      No matter which of the three exponent forms is used, no quantity may represent
      a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal
      places. Numbers larger or more precise will be capped or rounded up.
      (E.g.: 0.1m will rounded up to 1m.)
      This may be extended in the future if we require larger or smaller quantities.

      When a Quantity is parsed from a string, it will remember the type of suffix
      it had, and will use the same type again when it is serialized.

      Before serializing, Quantity will be put in "canonical form".
      This means that Exponent/suffix will be adjusted up or down (with a
      corresponding increase or decrease in Mantissa) such that:
      a. No precision is lost
      b. No fractional digits will be emitted
      c. The exponent (or suffix) is as large as possible.
      The sign will be omitted unless the number is negative.

      Examples:
      1.5 will be serialized as "1500m"
      1.5Gi will be serialized as "1536Mi"

      Note that the quantity will NEVER be internally represented by a
      floating point number. That is the whole point of this exercise.

      Non-canonical values will still parse as long as they are well formed,
      but will be re-emitted in their canonical form. (So always use canonical
      form, or don't diff.)

      This format is intended to make it difficult to use these numbers without
      writing some sort of special handling code in the hopes that that will
      cause implementors to also use a fixed point implementation.

      +protobuf=true
      +protobuf.embed=string
      +protobuf.options.marshal=false
      +protobuf.options.(gogoproto.goproto_stringer)=false
      +k8s:deepcopy-gen=true
      +k8s:openapi-gen=true
    title: |-
      Quantity is a fixed-point representation of a number.
      It provides convenient marshaling/unmarshaling in JSON and YAML,
      in addition to String() and Int64() accessors.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/apimachinery/pkg/api/resource
  QuobyteVolumeSource:
    description: Quobyte volumes do not support ownership management or SELinux relabeling.
    properties:
      group:
        description: |-
          Group to map volume access to
          Default is no group
          +optional
        type: string
        x-go-name: Group
      readOnly:
        description: |-
          ReadOnly here will force the Quobyte volume to be mounted with read-only permissions.
          Defaults to false.
          +optional
        type: boolean
        x-go-name: ReadOnly
      registry:
        description: |-
          Registry represents a single or multiple Quobyte Registry services
          specified as a string as host:port pair (multiple entries are separated with commas)
          which acts as the central registry for volumes
        type: string
        x-go-name: Registry
      user:
        description: |-
          User to map volume access to
          Defaults to serivceaccount user
          +optional
        type: string
        x-go-name: User
      volume:
        description: Volume is a string that references an already created Quobyte
          volume by name.
        type: string
        x-go-name: Volume
    title: Represents a Quobyte mount that lasts the lifetime of a pod.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  RBDVolumeSource:
    description: RBD volumes support ownership management and SELinux relabeling.
    properties:
      fsType:
        description: |-
          Filesystem type of the volume that you want to mount.
          Tip: Ensure that the filesystem type is supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
          TODO: how do we prevent errors in the filesystem from compromising the machine
          +optional
        type: string
        x-go-name: FSType
      image:
        description: |-
          The rados image name.
          More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
        type: string
        x-go-name: RBDImage
      keyring:
        description: |-
          Keyring is the path to key ring for RBDUser.
          Default is /etc/ceph/keyring.
          More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
          +optional
        type: string
        x-go-name: Keyring
      monitors:
        description: |-
          A collection of Ceph monitors.
          More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
        items:
          type: string
        type: array
        x-go-name: CephMonitors
      pool:
        description: |-
          The rados pool name.
          Default is rbd.
          More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
          +optional
        type: string
        x-go-name: RBDPool
      readOnly:
        description: |-
          ReadOnly here will force the ReadOnly setting in VolumeMounts.
          Defaults to false.
          More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
          +optional
        type: boolean
        x-go-name: ReadOnly
      secretRef:
        $ref: '#/definitions/LocalObjectReference'
      user:
        description: |-
          The rados user name.
          Default is admin.
          More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
          +optional
        type: string
        x-go-name: RadosUser
    title: Represents a Rados Block Device mount that lasts the lifetime of a pod.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  RegistrySecretCreateInput:
    properties:
      cluster:
        type: string
        x-go-name: Cluster
      email:
        type: string
        x-go-name: Email
      name:
        type: string
        x-go-name: Name
      namespace:
        type: string
        x-go-name: Namespace
      password:
        type: string
        x-go-name: Password
      server:
        type: string
        x-go-name: Server
      user:
        type: string
        x-go-name: User
    required:
    - cluster
    - name
    - namespace
    - user
    - password
    - server
    type: object
    x-go-package: yunion.io/x/yunion-kube/pkg/apis
  ResourceFieldSelector:
    description: ResourceFieldSelector represents container resources (cpu, memory)
      and their output format
    properties:
      containerName:
        description: |-
          Container name: required for volumes, optional for env vars
          +optional
        type: string
        x-go-name: ContainerName
      divisor:
        $ref: '#/definitions/Quantity'
      resource:
        description: 'Required: resource to select'
        type: string
        x-go-name: Resource
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  ResourceKind:
    description: |-
      ResourceKind is an unique name for each resource. It can used for API discovery and generic
      code that does things based on the kind. For example, there may be a generic "deleter"
      that based on resource kind, name and namespace deletes it.
    type: string
    x-go-package: yunion.io/x/yunion-kube/pkg/types/apis
  ResourceList:
    additionalProperties:
      $ref: '#/definitions/Quantity'
    title: ResourceList is a set of (resource name, quantity) pairs.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  ResourceRequirements:
    properties:
      limits:
        $ref: '#/definitions/ResourceList'
      requests:
        $ref: '#/definitions/ResourceList'
    title: ResourceRequirements describes the compute resource requirements.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  RestartPolicy:
    description: |-
      Only one of the following restart policies may be specified.
      If none of the following policies is specified, the default one
      is RestartPolicyAlways.
    title: RestartPolicy describes how the container should be restarted.
    type: string
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  RollingUpdateDeployment:
    properties:
      maxSurge:
        $ref: '#/definitions/IntOrString'
      maxUnavailable:
        $ref: '#/definitions/IntOrString'
    title: Spec to control the desired behavior of rolling update.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/apps/v1beta2
  SELinuxOptions:
    description: SELinuxOptions are the labels to be applied to the container
    properties:
      level:
        description: |-
          Level is SELinux level label that applies to the container.
          +optional
        type: string
        x-go-name: Level
      role:
        description: |-
          Role is a SELinux role label that applies to the container.
          +optional
        type: string
        x-go-name: Role
      type:
        description: |-
          Type is a SELinux type label that applies to the container.
          +optional
        type: string
        x-go-name: Type
      user:
        description: |-
          User is a SELinux user label that applies to the container.
          +optional
        type: string
        x-go-name: User
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  ScaleIOVolumeSource:
    description: ScaleIOVolumeSource represents a persistent ScaleIO volume
    properties:
      fsType:
        description: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs".
          Default is "xfs".
          +optional
        type: string
        x-go-name: FSType
      gateway:
        description: The host address of the ScaleIO API Gateway.
        type: string
        x-go-name: Gateway
      protectionDomain:
        description: |-
          The name of the ScaleIO Protection Domain for the configured storage.
          +optional
        type: string
        x-go-name: ProtectionDomain
      readOnly:
        description: |-
          Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
        x-go-name: ReadOnly
      secretRef:
        $ref: '#/definitions/LocalObjectReference'
      sslEnabled:
        description: |-
          Flag to enable/disable SSL communication with Gateway, default false
          +optional
        type: boolean
        x-go-name: SSLEnabled
      storageMode:
        description: |-
          Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
          Default is ThinProvisioned.
          +optional
        type: string
        x-go-name: StorageMode
      storagePool:
        description: |-
          The ScaleIO Storage Pool associated with the protection domain.
          +optional
        type: string
        x-go-name: StoragePool
      system:
        description: The name of the storage system as configured in ScaleIO.
        type: string
        x-go-name: System
      volumeName:
        description: |-
          The name of a volume already created in the ScaleIO system
          that is associated with this volume source.
        type: string
        x-go-name: VolumeName
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  SchedtagConfig:
    properties:
      id:
        type: string
        x-go-name: Id
      strategy:
        type: string
        x-go-name: Strategy
      weight:
        format: int64
        type: integer
        x-go-name: Weight
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/yunion.io/x/onecloud/pkg/apis/compute
  SecretDetail:
    description: |-
      SecretDetail API resource provides mechanisms to inject containers with configuration data while keeping
      containers agnostic of Kubernetes
    properties:
      annotations:
        additionalProperties:
          type: string
        description: |-
          Annotations are unstructured key value data stored with a resource that may be set by
          external tooling. They are not queryable and should be preserved when modifying
          objects.  Annotation keys have the same formatting restrictions as Label keys. See the
          comments on Labels for details.
        type: object
        x-go-name: Annotations
      cluster:
        description: Onecloud cluster data
        type: string
        x-go-name: Cluster
      clusterID:
        type: string
        x-go-name: ClusterId
      creationTimestamp:
        $ref: '#/definitions/Time'
      data:
        additionalProperties:
          items:
            format: uint8
            type: integer
          type: array
        description: |-
          Data contains the secret data.  Each key must be a valid DNS_SUBDOMAIN
          or leading dot followed by valid DNS_SUBDOMAIN.
          The serialized form of the secret data is a base64 encoded string,
          representing the arbitrary (possibly non-string) data value here.
        type: object
        x-go-name: Data
      kind:
        $ref: '#/definitions/ResourceKind'
      labels:
        additionalProperties:
          type: string
        description: |-
          Labels are key value pairs that may be used to scope and select individual resources.
          Label keys are of the form:
          label-key ::= prefixed-name | name
          prefixed-name ::= prefix '/' name
          prefix ::= DNS_SUBDOMAIN
          name ::= DNS_LABEL
          The prefix is optional.  If the prefix is not specified, the key is assumed to be private
          to the user.  Other system components that wish to use labels must specify a prefix.
        type: object
        x-go-name: Labels
      name:
        description: |-
          Name is unique within a namespace. Name is primarily intended for creation
          idempotence and configuration definition.
        type: string
        x-go-name: Name
      namespace:
        description: |-
          Namespace defines the space within which name must be unique. An empty namespace is
          equivalent to the "default" namespace, but "default" is the canonical representation.
          Not all objects are required to be scoped to a namespace - the value of this field for
          those objects will be empty.
        type: string
        x-go-name: Namespace
      type:
        $ref: '#/definitions/SecretType'
    type: object
    x-go-package: yunion.io/x/yunion-kube/pkg/apis
  SecretEnvSource:
    description: |-
      The contents of the target Secret's Data field will represent the
      key-value pairs as environment variables.
    properties:
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
        x-go-name: Name
      optional:
        description: |-
          Specify whether the Secret must be defined
          +optional
        type: boolean
        x-go-name: Optional
    title: |-
      SecretEnvSource selects a Secret to populate the environment
      variables with.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  SecretKeySelector:
    properties:
      key:
        description: The key of the secret to select from.  Must be a valid secret
          key.
        type: string
        x-go-name: Key
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
        x-go-name: Name
      optional:
        description: |-
          Specify whether the Secret or it's key must be defined
          +optional
        type: boolean
        x-go-name: Optional
    title: SecretKeySelector selects a key of a Secret.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  SecretProjection:
    description: |-
      The contents of the target Secret's Data field will be presented in a
      projected volume as files using the keys in the Data field as the file names.
      Note that this is identical to a secret volume source without the default
      mode.
    properties:
      items:
        description: |-
          If unspecified, each key-value pair in the Data field of the referenced
          Secret will be projected into the volume as a file whose name is the
          key and content is the value. If specified, the listed keys will be
          projected into the specified paths, and unlisted keys will not be
          present. If a key is specified which is not present in the Secret,
          the volume setup will error unless it is marked optional. Paths must be
          relative and may not contain the '..' path or start with '..'.
          +optional
        items:
          $ref: '#/definitions/KeyToPath'
        type: array
        x-go-name: Items
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
        x-go-name: Name
      optional:
        description: |-
          Specify whether the Secret or its key must be defined
          +optional
        type: boolean
        x-go-name: Optional
    title: Adapts a secret into a projected volume.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  SecretType:
    type: string
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  SecretVolumeSource:
    description: |-
      The contents of the target Secret's Data field will be presented in a volume
      as files using the keys in the Data field as the file names.
      Secret volumes support ownership management and SELinux relabeling.
    properties:
      defaultMode:
        description: |-
          Optional: mode bits to use on created files by default. Must be a
          value between 0 and 0777. Defaults to 0644.
          Directories within the path are not affected by this setting.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
        format: int32
        type: integer
        x-go-name: DefaultMode
      items:
        description: |-
          If unspecified, each key-value pair in the Data field of the referenced
          Secret will be projected into the volume as a file whose name is the
          key and content is the value. If specified, the listed keys will be
          projected into the specified paths, and unlisted keys will not be
          present. If a key is specified which is not present in the Secret,
          the volume setup will error unless it is marked optional. Paths must be
          relative and may not contain the '..' path or start with '..'.
          +optional
        items:
          $ref: '#/definitions/KeyToPath'
        type: array
        x-go-name: Items
      optional:
        description: |-
          Specify whether the Secret or it's keys must be defined
          +optional
        type: boolean
        x-go-name: Optional
      secretName:
        description: |-
          Name of the secret in the pod's namespace to use.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
          +optional
        type: string
        x-go-name: SecretName
    title: Adapts a Secret into a volume.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  SecurityContext:
    description: |-
      Some fields are present in both SecurityContext and PodSecurityContext.  When both
      are set, the values in SecurityContext take precedence.
    properties:
      allowPrivilegeEscalation:
        description: |-
          AllowPrivilegeEscalation controls whether a process can gain more
          privileges than its parent process. This bool directly controls if
          the no_new_privs flag will be set on the container process.
          AllowPrivilegeEscalation is true always when the container is:
          1) run as Privileged
          2) has CAP_SYS_ADMIN
          +optional
        type: boolean
        x-go-name: AllowPrivilegeEscalation
      capabilities:
        $ref: '#/definitions/Capabilities'
      privileged:
        description: |-
          Run container in privileged mode.
          Processes in privileged containers are essentially equivalent to root on the host.
          Defaults to false.
          +optional
        type: boolean
        x-go-name: Privileged
      procMount:
        $ref: '#/definitions/ProcMountType'
      readOnlyRootFilesystem:
        description: |-
          Whether this container has a read-only root filesystem.
          Default is false.
          +optional
        type: boolean
        x-go-name: ReadOnlyRootFilesystem
      runAsGroup:
        description: |-
          The GID to run the entrypoint of the container process.
          Uses runtime default if unset.
          May also be set in PodSecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          +optional
        format: int64
        type: integer
        x-go-name: RunAsGroup
      runAsNonRoot:
        description: |-
          Indicates that the container must run as a non-root user.
          If true, the Kubelet will validate the image at runtime to ensure that it
          does not run as UID 0 (root) and fail to start the container if it does.
          If unset or false, no such validation will be performed.
          May also be set in PodSecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          +optional
        type: boolean
        x-go-name: RunAsNonRoot
      runAsUser:
        description: |-
          The UID to run the entrypoint of the container process.
          Defaults to user specified in image metadata if unspecified.
          May also be set in PodSecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          +optional
        format: int64
        type: integer
        x-go-name: RunAsUser
      seLinuxOptions:
        $ref: '#/definitions/SELinuxOptions'
    title: SecurityContext holds security configuration that will be applied to a
      container.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  ServiceAccountTokenProjection:
    description: |-
      ServiceAccountTokenProjection represents a projected service account token
      volume. This projection can be used to insert a service account token into
      the pods runtime filesystem for use against APIs (Kubernetes API Server or
      otherwise).
    properties:
      audience:
        description: |-
          Audience is the intended audience of the token. A recipient of a token
          must identify itself with an identifier specified in the audience of the
          token, and otherwise should reject the token. The audience defaults to the
          identifier of the apiserver.
          +optional
        type: string
        x-go-name: Audience
      expirationSeconds:
        description: |-
          ExpirationSeconds is the requested duration of validity of the service
          account token. As the token approaches expiration, the kubelet volume
          plugin will proactively rotate the service account token. The kubelet will
          start trying to rotate the token if the token is older than 80 percent of
          its time to live or if the token is older than 24 hours.Defaults to 1 hour
          and must be at least 10 minutes.
          +optional
        format: int64
        type: integer
        x-go-name: ExpirationSeconds
      path:
        description: |-
          Path is the path relative to the mount point of the file to project the
          token into.
        type: string
        x-go-name: Path
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  StatefulsetUpdateInput:
    properties:
      cluster:
        type: string
        x-go-name: Cluster
      containers:
        items:
          $ref: '#/definitions/ContainerUpdateInput'
        type: array
        x-go-name: Containers
      dnsPolicy:
        $ref: '#/definitions/DNSPolicy'
      initContainers:
        items:
          $ref: '#/definitions/ContainerUpdateInput'
        type: array
        x-go-name: InitContainers
      name:
        type: string
        x-go-name: Name
      namespace:
        type: string
        x-go-name: Namespace
      replicas:
        format: int32
        type: integer
        x-go-name: Replicas
      restartPolicy:
        $ref: '#/definitions/RestartPolicy'
    required:
    - cluster
    - name
    - namespace
    type: object
    x-go-package: yunion.io/x/yunion-kube/pkg/apis
  Status:
    properties:
      apiVersion:
        description: |-
          APIVersion defines the versioned schema of this representation of an object.
          Servers should convert recognized schemas to the latest internal value, and
          may reject unrecognized values.
          More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
          +optional
        type: string
        x-go-name: APIVersion
      code:
        description: |-
          Suggested HTTP return code for this status, 0 if not set.
          +optional
        format: int32
        type: integer
        x-go-name: Code
      continue:
        description: |-
          continue may be set if the user set a limit on the number of items returned, and indicates that
          the server has more data available. The value is opaque and may be used to issue another request
          to the endpoint that served this list to retrieve the next set of available objects. Continuing a
          consistent list may not be possible if the server configuration has changed or more than a few
          minutes have passed. The resourceVersion field returned when using this continue value will be
          identical to the value in the first response, unless you have received this token from an error
          message.
        type: string
        x-go-name: Continue
      details:
        $ref: '#/definitions/StatusDetails'
      kind:
        description: |-
          Kind is a string value representing the REST resource this object represents.
          Servers may infer this from the endpoint the client submits requests to.
          Cannot be updated.
          In CamelCase.
          More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
          +optional
        type: string
        x-go-name: Kind
      message:
        description: |-
          A human-readable description of the status of this operation.
          +optional
        type: string
        x-go-name: Message
      reason:
        $ref: '#/definitions/StatusReason'
      resourceVersion:
        description: |-
          String that identifies the server's internal version of this object that
          can be used by clients to determine when objects have changed.
          Value must be treated as opaque by clients and passed unmodified back to the server.
          Populated by the system.
          Read-only.
          More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
          +optional
        type: string
        x-go-name: ResourceVersion
      selfLink:
        description: |-
          selfLink is a URL representing this object.
          Populated by the system.
          Read-only.
          +optional
        type: string
        x-go-name: SelfLink
      status:
        description: |-
          Status of the operation.
          One of: "Success" or "Failure".
          More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
          +optional
        type: string
        x-go-name: Status
    title: Status is a return value for calls that don't return other objects.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/apimachinery/pkg/apis/meta/v1
  StatusCause:
    description: |-
      StatusCause provides more information about an api.Status failure, including
      cases when multiple errors are encountered.
    properties:
      field:
        description: |-
          The field of the resource that has caused this error, as named by its JSON
          serialization. May include dot and postfix notation for nested attributes.
          Arrays are zero-indexed.  Fields may appear more than once in an array of
          causes due to fields having multiple errors.
          Optional.

          Examples:
          "name" - the field "name" on the current resource
          "items[0].name" - the field "name" on the first array entry in "items"
          +optional
        type: string
        x-go-name: Field
      message:
        description: |-
          A human-readable description of the cause of the error.  This field may be
          presented as-is to a reader.
          +optional
        type: string
        x-go-name: Message
      reason:
        $ref: '#/definitions/CauseType'
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/apimachinery/pkg/apis/meta/v1
  StatusDetails:
    description: |-
      StatusDetails is a set of additional properties that MAY be set by the
      server to provide additional information about a response. The Reason
      field of a Status object defines what attributes will be set. Clients
      must ignore fields that do not match the defined type of each attribute,
      and should assume that any attribute may be empty, invalid, or under
      defined.
    properties:
      causes:
        description: |-
          The Causes array includes more details associated with the StatusReason
          failure. Not all StatusReasons may provide detailed causes.
          +optional
        items:
          $ref: '#/definitions/StatusCause'
        type: array
        x-go-name: Causes
      group:
        description: |-
          The group attribute of the resource associated with the status StatusReason.
          +optional
        type: string
        x-go-name: Group
      kind:
        description: |-
          The kind attribute of the resource associated with the status StatusReason.
          On some operations may differ from the requested resource Kind.
          More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
          +optional
        type: string
        x-go-name: Kind
      name:
        description: |-
          The name attribute of the resource associated with the status StatusReason
          (when there is a single name which can be described).
          +optional
        type: string
        x-go-name: Name
      retryAfterSeconds:
        description: |-
          If specified, the time in seconds before the operation should be retried. Some errors may indicate
          the client must take an alternate action - for those errors this field may indicate how long to wait
          before taking the alternate action.
          +optional
        format: int32
        type: integer
        x-go-name: RetryAfterSeconds
      uid:
        $ref: '#/definitions/UID'
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/apimachinery/pkg/apis/meta/v1
  StatusReason:
    description: |-
      StatusReason is an enumeration of possible failure causes.  Each StatusReason
      must map to a single HTTP status code, but multiple reasons may map
      to the same HTTP status code.
      TODO: move to apiserver
    type: string
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/apimachinery/pkg/apis/meta/v1
  StorageMedium:
    title: StorageMedium defines ways that storage can be allocated to a volume.
    type: string
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  StorageOSVolumeSource:
    properties:
      fsType:
        description: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          +optional
        type: string
        x-go-name: FSType
      readOnly:
        description: |-
          Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
        x-go-name: ReadOnly
      secretRef:
        $ref: '#/definitions/LocalObjectReference'
      volumeName:
        description: |-
          VolumeName is the human-readable name of the StorageOS volume.  Volume
          names are only unique within a namespace.
        type: string
        x-go-name: VolumeName
      volumeNamespace:
        description: |-
          VolumeNamespace specifies the scope of the volume within StorageOS.  If no
          namespace is specified then the Pod's namespace will be used.  This allows the
          Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
          Set VolumeName to any name to override the default behaviour.
          Set to "default" if you are not using namespaces within StorageOS.
          Namespaces that do not pre-exist within StorageOS will be created.
          +optional
        type: string
        x-go-name: VolumeNamespace
    title: Represents a StorageOS persistent volume resource.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  Sysctl:
    description: Sysctl defines a kernel parameter to be set
    properties:
      name:
        description: Name of a property to set
        type: string
        x-go-name: Name
      value:
        description: Value of a property to set
        type: string
        x-go-name: Value
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  TCPSocketAction:
    description: TCPSocketAction describes an action based on opening a socket
    properties:
      host:
        description: |-
          Optional: Host name to connect to, defaults to the pod IP.
          +optional
        type: string
        x-go-name: Host
      port:
        $ref: '#/definitions/IntOrString'
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  TaintEffect:
    type: string
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  TerminationMessagePolicy:
    title: TerminationMessagePolicy describes how termination messages are retrieved
      from a container.
    type: string
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  Time:
    description: |-
      +protobuf.options.marshal=false
      +protobuf.as=Timestamp
      +protobuf.options.(gogoproto.goproto_stringer)=false
    title: |-
      Time is a wrapper around time.Time which supports correct
      marshaling to YAML and JSON.  Wrappers are provided for many
      of the factory methods that the time package offers.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/apimachinery/pkg/apis/meta/v1
  Toleration:
    description: |-
      The pod this Toleration is attached to tolerates any taint that matches
      the triple <key,value,effect> using the matching operator <operator>.
    properties:
      effect:
        $ref: '#/definitions/TaintEffect'
      key:
        description: |-
          Key is the taint key that the toleration applies to. Empty means match all taint keys.
          If the key is empty, operator must be Exists; this combination means to match all values and all keys.
          +optional
        type: string
        x-go-name: Key
      operator:
        $ref: '#/definitions/TolerationOperator'
      tolerationSeconds:
        description: |-
          TolerationSeconds represents the period of time the toleration (which must be
          of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
          it is not set, which means tolerate the taint forever (do not evict). Zero and
          negative values will be treated as 0 (evict immediately) by the system.
          +optional
        format: int64
        type: integer
        x-go-name: TolerationSeconds
      value:
        description: |-
          Value is the taint value the toleration matches to.
          If the operator is Exists, the value should be empty, otherwise just a regular string.
          +optional
        type: string
        x-go-name: Value
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  TolerationOperator:
    title: A toleration operator is the set of operators that can be used in a toleration.
    type: string
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  Type:
    format: int64
    title: Type represents the stored type of IntOrString.
    type: integer
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/apimachinery/pkg/util/intstr
  UID:
    description: |-
      UID is a type that holds unique ID values, including UUIDs.  Because we
      don't ONLY use UUIDs, this is an alias to string.  Being a type captures
      intent and helps make sure that UIDs and names do not get conflated.
    type: string
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/apimachinery/pkg/types
  URIScheme:
    description: URIScheme identifies the scheme used for connection to a host for
      Get actions
    type: string
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  Volume:
    properties:
      awsElasticBlockStore:
        $ref: '#/definitions/AWSElasticBlockStoreVolumeSource'
      azureDisk:
        $ref: '#/definitions/AzureDiskVolumeSource'
      azureFile:
        $ref: '#/definitions/AzureFileVolumeSource'
      cephfs:
        $ref: '#/definitions/CephFSVolumeSource'
      cinder:
        $ref: '#/definitions/CinderVolumeSource'
      configMap:
        $ref: '#/definitions/ConfigMapVolumeSource'
      downwardAPI:
        $ref: '#/definitions/DownwardAPIVolumeSource'
      emptyDir:
        $ref: '#/definitions/EmptyDirVolumeSource'
      fc:
        $ref: '#/definitions/FCVolumeSource'
      flexVolume:
        $ref: '#/definitions/FlexVolumeSource'
      flocker:
        $ref: '#/definitions/FlockerVolumeSource'
      gcePersistentDisk:
        $ref: '#/definitions/GCEPersistentDiskVolumeSource'
      gitRepo:
        $ref: '#/definitions/GitRepoVolumeSource'
      glusterfs:
        $ref: '#/definitions/GlusterfsVolumeSource'
      hostPath:
        $ref: '#/definitions/HostPathVolumeSource'
      iscsi:
        $ref: '#/definitions/ISCSIVolumeSource'
      name:
        description: |-
          Volume's name.
          Must be a DNS_LABEL and unique within the pod.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        type: string
        x-go-name: Name
      nfs:
        $ref: '#/definitions/NFSVolumeSource'
      persistentVolumeClaim:
        $ref: '#/definitions/PersistentVolumeClaimVolumeSource'
      photonPersistentDisk:
        $ref: '#/definitions/PhotonPersistentDiskVolumeSource'
      portworxVolume:
        $ref: '#/definitions/PortworxVolumeSource'
      projected:
        $ref: '#/definitions/ProjectedVolumeSource'
      quobyte:
        $ref: '#/definitions/QuobyteVolumeSource'
      rbd:
        $ref: '#/definitions/RBDVolumeSource'
      scaleIO:
        $ref: '#/definitions/ScaleIOVolumeSource'
      secret:
        $ref: '#/definitions/SecretVolumeSource'
      storageos:
        $ref: '#/definitions/StorageOSVolumeSource'
      vsphereVolume:
        $ref: '#/definitions/VsphereVirtualDiskVolumeSource'
    title: Volume represents a named volume in a pod that may be accessed by any container
      in the pod.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  VolumeDevice:
    properties:
      devicePath:
        description: devicePath is the path inside of the container that the device
          will be mapped to.
        type: string
        x-go-name: DevicePath
      name:
        description: name must match the name of a persistentVolumeClaim in the pod
        type: string
        x-go-name: Name
    title: volumeDevice describes a mapping of a raw block device within a container.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  VolumeMount:
    properties:
      mountPath:
        description: |-
          Path within the container at which the volume should be mounted.  Must
          not contain ':'.
        type: string
        x-go-name: MountPath
      mountPropagation:
        $ref: '#/definitions/MountPropagationMode'
      name:
        description: This must match the Name of a Volume.
        type: string
        x-go-name: Name
      readOnly:
        description: |-
          Mounted read-only if true, read-write otherwise (false or unspecified).
          Defaults to false.
          +optional
        type: boolean
        x-go-name: ReadOnly
      subPath:
        description: |-
          Path within the volume from which the container's volume should be mounted.
          Defaults to "" (volume's root).
          +optional
        type: string
        x-go-name: SubPath
    title: VolumeMount describes a mounting of a Volume within a container.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  VolumeProjection:
    description: Projection that may be projected along with other supported volume
      types
    properties:
      configMap:
        $ref: '#/definitions/ConfigMapProjection'
      downwardAPI:
        $ref: '#/definitions/DownwardAPIProjection'
      secret:
        $ref: '#/definitions/SecretProjection'
      serviceAccountToken:
        $ref: '#/definitions/ServiceAccountTokenProjection'
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  VsphereVirtualDiskVolumeSource:
    properties:
      fsType:
        description: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          +optional
        type: string
        x-go-name: FSType
      storagePolicyID:
        description: |-
          Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
          +optional
        type: string
        x-go-name: StoragePolicyID
      storagePolicyName:
        description: |-
          Storage Policy Based Management (SPBM) profile name.
          +optional
        type: string
        x-go-name: StoragePolicyName
      volumePath:
        description: Path that identifies vSphere volume vmdk
        type: string
        x-go-name: VolumePath
    title: Represents a vSphere volume resource.
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
  WeightedPodAffinityTerm:
    description: The weights of all of the matched WeightedPodAffinityTerm fields
      are added per-node to find the most preferred node(s)
    properties:
      podAffinityTerm:
        $ref: '#/definitions/PodAffinityTerm'
      weight:
        description: |-
          weight associated with matching the corresponding podAffinityTerm,
          in the range 1-100.
        format: int32
        type: integer
        x-go-name: Weight
    type: object
    x-go-package: yunion.io/x/yunion-kube/vendor/k8s.io/api/core/v1
host: localhost
info:
  contact:
    email: lizexi@yunion.cn
    name: Zexi Li
  description: swagger define
  version: "1.0"
paths:
  /configmaps/{name}:
    get:
      description: Get configmap details
      operationId: configMapShowInput
      parameters:
      - description: The Name of kubernetes object
        in: path
        name: name
        required: true
        type: string
        x-go-name: Name
      - in: query
        name: cluster
        required: true
        type: string
        x-go-name: Cluster
      - in: query
        name: namespace
        required: true
        type: string
        x-go-name: Namespace
      responses:
        "200":
          $ref: '#/responses/configMapShowOutput'
  /deployments:
    put:
      description: Update deployment spec
      operationId: deploymentUpdateInput
      parameters:
      - in: body
        name: Body
        schema:
          $ref: '#/definitions/DeploymentUpdateInput'
      responses:
        "200":
          $ref: '#/responses/deploymentUpdateOutput'
  /kubeclusters:
    post:
      description: Create kubernetes cluster
      operationId: clusterCreateInput
      parameters:
      - in: body
        name: Body
        schema:
          $ref: '#/definitions/ClusterCreateInput'
      responses:
        "200":
          $ref: '#/responses/clusterCreateOutput'
  /registrysecrets:
    post:
      description: Create docker registry auth secret
      operationId: registrySecretCreateInput
      parameters:
      - in: body
        name: Body
        schema:
          $ref: '#/definitions/RegistrySecretCreateInput'
      responses:
        "200":
          $ref: '#/responses/registrySecretCreateOutput'
  /statefulsets:
    put:
      description: Update statefulset spec
      operationId: statefulsetUpdateInput
      parameters:
      - in: body
        name: Body
        schema:
          $ref: '#/definitions/StatefulsetUpdateInput'
      responses:
        "200":
          $ref: '#/responses/statefulsetUpdateOutput'
produces:
- application/json
responses:
  clusterCreateOutput:
    schema:
      properties:
        kubecluster:
          $ref: '#/definitions/ClusterCreateOutput'
      type: object
  configMapShowOutput:
    schema:
      properties:
        configmap:
          $ref: '#/definitions/ConfigMapDetail'
      type: object
  deploymentUpdateOutput:
    schema:
      properties:
        deployment:
          $ref: '#/definitions/Deployment'
      type: object
  registrySecretCreateOutput:
    schema:
      properties:
        registrysecret:
          $ref: '#/definitions/SecretDetail'
      type: object
  statefulsetUpdateOutput:
    schema:
      properties:
        statefulset:
          $ref: '#/definitions/Deployment'
      type: object
schemes:
- https
- http
swagger: "2.0"
