// Code generated by protoc-gen-go. DO NOT EDIT.
// source: localvolume.proto

package localvolume

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AttachImageRequest struct {
	// cloud local disk name
	DiskPath             string   `protobuf:"bytes,1,opt,name=disk_path,json=diskPath" json:"disk_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AttachImageRequest) Reset()         { *m = AttachImageRequest{} }
func (m *AttachImageRequest) String() string { return proto.CompactTextString(m) }
func (*AttachImageRequest) ProtoMessage()    {}
func (*AttachImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_localvolume_fe507e0538b63fa8, []int{0}
}
func (m *AttachImageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttachImageRequest.Unmarshal(m, b)
}
func (m *AttachImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttachImageRequest.Marshal(b, m, deterministic)
}
func (dst *AttachImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttachImageRequest.Merge(dst, src)
}
func (m *AttachImageRequest) XXX_Size() int {
	return xxx_messageInfo_AttachImageRequest.Size(m)
}
func (m *AttachImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AttachImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AttachImageRequest proto.InternalMessageInfo

func (m *AttachImageRequest) GetDiskPath() string {
	if m != nil {
		return m.DiskPath
	}
	return ""
}

type AttachImageResponse struct {
	// attached local disk loop device path
	DevicePath           string   `protobuf:"bytes,1,opt,name=device_path,json=devicePath" json:"device_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AttachImageResponse) Reset()         { *m = AttachImageResponse{} }
func (m *AttachImageResponse) String() string { return proto.CompactTextString(m) }
func (*AttachImageResponse) ProtoMessage()    {}
func (*AttachImageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_localvolume_fe507e0538b63fa8, []int{1}
}
func (m *AttachImageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttachImageResponse.Unmarshal(m, b)
}
func (m *AttachImageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttachImageResponse.Marshal(b, m, deterministic)
}
func (dst *AttachImageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttachImageResponse.Merge(dst, src)
}
func (m *AttachImageResponse) XXX_Size() int {
	return xxx_messageInfo_AttachImageResponse.Size(m)
}
func (m *AttachImageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AttachImageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AttachImageResponse proto.InternalMessageInfo

func (m *AttachImageResponse) GetDevicePath() string {
	if m != nil {
		return m.DevicePath
	}
	return ""
}

type MountVolumeRequest struct {
	DevicePath           string   `protobuf:"bytes,1,opt,name=device_path,json=devicePath" json:"device_path,omitempty"`
	TargetPath           string   `protobuf:"bytes,2,opt,name=target_path,json=targetPath" json:"target_path,omitempty"`
	FsType               string   `protobuf:"bytes,3,opt,name=fs_type,json=fsType" json:"fs_type,omitempty"`
	ReadOnly             bool     `protobuf:"varint,4,opt,name=read_only,json=readOnly" json:"read_only,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MountVolumeRequest) Reset()         { *m = MountVolumeRequest{} }
func (m *MountVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*MountVolumeRequest) ProtoMessage()    {}
func (*MountVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_localvolume_fe507e0538b63fa8, []int{2}
}
func (m *MountVolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MountVolumeRequest.Unmarshal(m, b)
}
func (m *MountVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MountVolumeRequest.Marshal(b, m, deterministic)
}
func (dst *MountVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MountVolumeRequest.Merge(dst, src)
}
func (m *MountVolumeRequest) XXX_Size() int {
	return xxx_messageInfo_MountVolumeRequest.Size(m)
}
func (m *MountVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MountVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MountVolumeRequest proto.InternalMessageInfo

func (m *MountVolumeRequest) GetDevicePath() string {
	if m != nil {
		return m.DevicePath
	}
	return ""
}

func (m *MountVolumeRequest) GetTargetPath() string {
	if m != nil {
		return m.TargetPath
	}
	return ""
}

func (m *MountVolumeRequest) GetFsType() string {
	if m != nil {
		return m.FsType
	}
	return ""
}

func (m *MountVolumeRequest) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

type MountVolumeResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MountVolumeResponse) Reset()         { *m = MountVolumeResponse{} }
func (m *MountVolumeResponse) String() string { return proto.CompactTextString(m) }
func (*MountVolumeResponse) ProtoMessage()    {}
func (*MountVolumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_localvolume_fe507e0538b63fa8, []int{3}
}
func (m *MountVolumeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MountVolumeResponse.Unmarshal(m, b)
}
func (m *MountVolumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MountVolumeResponse.Marshal(b, m, deterministic)
}
func (dst *MountVolumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MountVolumeResponse.Merge(dst, src)
}
func (m *MountVolumeResponse) XXX_Size() int {
	return xxx_messageInfo_MountVolumeResponse.Size(m)
}
func (m *MountVolumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MountVolumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MountVolumeResponse proto.InternalMessageInfo

type IsMountedRequest struct {
	TargetPath           string   `protobuf:"bytes,2,opt,name=target_path,json=targetPath" json:"target_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsMountedRequest) Reset()         { *m = IsMountedRequest{} }
func (m *IsMountedRequest) String() string { return proto.CompactTextString(m) }
func (*IsMountedRequest) ProtoMessage()    {}
func (*IsMountedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_localvolume_fe507e0538b63fa8, []int{4}
}
func (m *IsMountedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsMountedRequest.Unmarshal(m, b)
}
func (m *IsMountedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsMountedRequest.Marshal(b, m, deterministic)
}
func (dst *IsMountedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsMountedRequest.Merge(dst, src)
}
func (m *IsMountedRequest) XXX_Size() int {
	return xxx_messageInfo_IsMountedRequest.Size(m)
}
func (m *IsMountedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsMountedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsMountedRequest proto.InternalMessageInfo

func (m *IsMountedRequest) GetTargetPath() string {
	if m != nil {
		return m.TargetPath
	}
	return ""
}

type IsMountedResponse struct {
	Mounted              bool     `protobuf:"varint,1,opt,name=mounted" json:"mounted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsMountedResponse) Reset()         { *m = IsMountedResponse{} }
func (m *IsMountedResponse) String() string { return proto.CompactTextString(m) }
func (*IsMountedResponse) ProtoMessage()    {}
func (*IsMountedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_localvolume_fe507e0538b63fa8, []int{5}
}
func (m *IsMountedResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsMountedResponse.Unmarshal(m, b)
}
func (m *IsMountedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsMountedResponse.Marshal(b, m, deterministic)
}
func (dst *IsMountedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsMountedResponse.Merge(dst, src)
}
func (m *IsMountedResponse) XXX_Size() int {
	return xxx_messageInfo_IsMountedResponse.Size(m)
}
func (m *IsMountedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsMountedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsMountedResponse proto.InternalMessageInfo

func (m *IsMountedResponse) GetMounted() bool {
	if m != nil {
		return m.Mounted
	}
	return false
}

type UnmountVolumeRequest struct {
	TargetPath           string   `protobuf:"bytes,1,opt,name=target_path,json=targetPath" json:"target_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnmountVolumeRequest) Reset()         { *m = UnmountVolumeRequest{} }
func (m *UnmountVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*UnmountVolumeRequest) ProtoMessage()    {}
func (*UnmountVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_localvolume_fe507e0538b63fa8, []int{6}
}
func (m *UnmountVolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnmountVolumeRequest.Unmarshal(m, b)
}
func (m *UnmountVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnmountVolumeRequest.Marshal(b, m, deterministic)
}
func (dst *UnmountVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnmountVolumeRequest.Merge(dst, src)
}
func (m *UnmountVolumeRequest) XXX_Size() int {
	return xxx_messageInfo_UnmountVolumeRequest.Size(m)
}
func (m *UnmountVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnmountVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnmountVolumeRequest proto.InternalMessageInfo

func (m *UnmountVolumeRequest) GetTargetPath() string {
	if m != nil {
		return m.TargetPath
	}
	return ""
}

type UnmountVolumeResponse struct {
	DevicePath           string   `protobuf:"bytes,1,opt,name=device_path,json=devicePath" json:"device_path,omitempty"`
	Count                int32    `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnmountVolumeResponse) Reset()         { *m = UnmountVolumeResponse{} }
func (m *UnmountVolumeResponse) String() string { return proto.CompactTextString(m) }
func (*UnmountVolumeResponse) ProtoMessage()    {}
func (*UnmountVolumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_localvolume_fe507e0538b63fa8, []int{7}
}
func (m *UnmountVolumeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnmountVolumeResponse.Unmarshal(m, b)
}
func (m *UnmountVolumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnmountVolumeResponse.Marshal(b, m, deterministic)
}
func (dst *UnmountVolumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnmountVolumeResponse.Merge(dst, src)
}
func (m *UnmountVolumeResponse) XXX_Size() int {
	return xxx_messageInfo_UnmountVolumeResponse.Size(m)
}
func (m *UnmountVolumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnmountVolumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnmountVolumeResponse proto.InternalMessageInfo

func (m *UnmountVolumeResponse) GetDevicePath() string {
	if m != nil {
		return m.DevicePath
	}
	return ""
}

func (m *UnmountVolumeResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type DetachDeviceRequest struct {
	DevicePath           string   `protobuf:"bytes,1,opt,name=device_path,json=devicePath" json:"device_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DetachDeviceRequest) Reset()         { *m = DetachDeviceRequest{} }
func (m *DetachDeviceRequest) String() string { return proto.CompactTextString(m) }
func (*DetachDeviceRequest) ProtoMessage()    {}
func (*DetachDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_localvolume_fe507e0538b63fa8, []int{8}
}
func (m *DetachDeviceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DetachDeviceRequest.Unmarshal(m, b)
}
func (m *DetachDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DetachDeviceRequest.Marshal(b, m, deterministic)
}
func (dst *DetachDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetachDeviceRequest.Merge(dst, src)
}
func (m *DetachDeviceRequest) XXX_Size() int {
	return xxx_messageInfo_DetachDeviceRequest.Size(m)
}
func (m *DetachDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DetachDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DetachDeviceRequest proto.InternalMessageInfo

func (m *DetachDeviceRequest) GetDevicePath() string {
	if m != nil {
		return m.DevicePath
	}
	return ""
}

type DetachDeviceResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DetachDeviceResponse) Reset()         { *m = DetachDeviceResponse{} }
func (m *DetachDeviceResponse) String() string { return proto.CompactTextString(m) }
func (*DetachDeviceResponse) ProtoMessage()    {}
func (*DetachDeviceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_localvolume_fe507e0538b63fa8, []int{9}
}
func (m *DetachDeviceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DetachDeviceResponse.Unmarshal(m, b)
}
func (m *DetachDeviceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DetachDeviceResponse.Marshal(b, m, deterministic)
}
func (dst *DetachDeviceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetachDeviceResponse.Merge(dst, src)
}
func (m *DetachDeviceResponse) XXX_Size() int {
	return xxx_messageInfo_DetachDeviceResponse.Size(m)
}
func (m *DetachDeviceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DetachDeviceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DetachDeviceResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AttachImageRequest)(nil), "localvolume.AttachImageRequest")
	proto.RegisterType((*AttachImageResponse)(nil), "localvolume.AttachImageResponse")
	proto.RegisterType((*MountVolumeRequest)(nil), "localvolume.MountVolumeRequest")
	proto.RegisterType((*MountVolumeResponse)(nil), "localvolume.MountVolumeResponse")
	proto.RegisterType((*IsMountedRequest)(nil), "localvolume.IsMountedRequest")
	proto.RegisterType((*IsMountedResponse)(nil), "localvolume.IsMountedResponse")
	proto.RegisterType((*UnmountVolumeRequest)(nil), "localvolume.UnmountVolumeRequest")
	proto.RegisterType((*UnmountVolumeResponse)(nil), "localvolume.UnmountVolumeResponse")
	proto.RegisterType((*DetachDeviceRequest)(nil), "localvolume.DetachDeviceRequest")
	proto.RegisterType((*DetachDeviceResponse)(nil), "localvolume.DetachDeviceResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for LocalVolume service

type LocalVolumeClient interface {
	AttachImage(ctx context.Context, in *AttachImageRequest, opts ...grpc.CallOption) (*AttachImageResponse, error)
	IsMounted(ctx context.Context, in *IsMountedRequest, opts ...grpc.CallOption) (*IsMountedResponse, error)
	MountVolume(ctx context.Context, in *MountVolumeRequest, opts ...grpc.CallOption) (*MountVolumeResponse, error)
	UnmountVolume(ctx context.Context, in *UnmountVolumeRequest, opts ...grpc.CallOption) (*UnmountVolumeResponse, error)
	DetachDevice(ctx context.Context, in *DetachDeviceRequest, opts ...grpc.CallOption) (*DetachDeviceResponse, error)
}

type localVolumeClient struct {
	cc *grpc.ClientConn
}

func NewLocalVolumeClient(cc *grpc.ClientConn) LocalVolumeClient {
	return &localVolumeClient{cc}
}

func (c *localVolumeClient) AttachImage(ctx context.Context, in *AttachImageRequest, opts ...grpc.CallOption) (*AttachImageResponse, error) {
	out := new(AttachImageResponse)
	err := grpc.Invoke(ctx, "/localvolume.LocalVolume/AttachImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localVolumeClient) IsMounted(ctx context.Context, in *IsMountedRequest, opts ...grpc.CallOption) (*IsMountedResponse, error) {
	out := new(IsMountedResponse)
	err := grpc.Invoke(ctx, "/localvolume.LocalVolume/IsMounted", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localVolumeClient) MountVolume(ctx context.Context, in *MountVolumeRequest, opts ...grpc.CallOption) (*MountVolumeResponse, error) {
	out := new(MountVolumeResponse)
	err := grpc.Invoke(ctx, "/localvolume.LocalVolume/MountVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localVolumeClient) UnmountVolume(ctx context.Context, in *UnmountVolumeRequest, opts ...grpc.CallOption) (*UnmountVolumeResponse, error) {
	out := new(UnmountVolumeResponse)
	err := grpc.Invoke(ctx, "/localvolume.LocalVolume/UnmountVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localVolumeClient) DetachDevice(ctx context.Context, in *DetachDeviceRequest, opts ...grpc.CallOption) (*DetachDeviceResponse, error) {
	out := new(DetachDeviceResponse)
	err := grpc.Invoke(ctx, "/localvolume.LocalVolume/DetachDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LocalVolume service

type LocalVolumeServer interface {
	AttachImage(context.Context, *AttachImageRequest) (*AttachImageResponse, error)
	IsMounted(context.Context, *IsMountedRequest) (*IsMountedResponse, error)
	MountVolume(context.Context, *MountVolumeRequest) (*MountVolumeResponse, error)
	UnmountVolume(context.Context, *UnmountVolumeRequest) (*UnmountVolumeResponse, error)
	DetachDevice(context.Context, *DetachDeviceRequest) (*DetachDeviceResponse, error)
}

func RegisterLocalVolumeServer(s *grpc.Server, srv LocalVolumeServer) {
	s.RegisterService(&_LocalVolume_serviceDesc, srv)
}

func _LocalVolume_AttachImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalVolumeServer).AttachImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/localvolume.LocalVolume/AttachImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalVolumeServer).AttachImage(ctx, req.(*AttachImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalVolume_IsMounted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsMountedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalVolumeServer).IsMounted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/localvolume.LocalVolume/IsMounted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalVolumeServer).IsMounted(ctx, req.(*IsMountedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalVolume_MountVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalVolumeServer).MountVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/localvolume.LocalVolume/MountVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalVolumeServer).MountVolume(ctx, req.(*MountVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalVolume_UnmountVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmountVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalVolumeServer).UnmountVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/localvolume.LocalVolume/UnmountVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalVolumeServer).UnmountVolume(ctx, req.(*UnmountVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalVolume_DetachDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalVolumeServer).DetachDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/localvolume.LocalVolume/DetachDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalVolumeServer).DetachDevice(ctx, req.(*DetachDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LocalVolume_serviceDesc = grpc.ServiceDesc{
	ServiceName: "localvolume.LocalVolume",
	HandlerType: (*LocalVolumeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AttachImage",
			Handler:    _LocalVolume_AttachImage_Handler,
		},
		{
			MethodName: "IsMounted",
			Handler:    _LocalVolume_IsMounted_Handler,
		},
		{
			MethodName: "MountVolume",
			Handler:    _LocalVolume_MountVolume_Handler,
		},
		{
			MethodName: "UnmountVolume",
			Handler:    _LocalVolume_UnmountVolume_Handler,
		},
		{
			MethodName: "DetachDevice",
			Handler:    _LocalVolume_DetachDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "localvolume.proto",
}

func init() { proto.RegisterFile("localvolume.proto", fileDescriptor_localvolume_fe507e0538b63fa8) }

var fileDescriptor_localvolume_fe507e0538b63fa8 = []byte{
	// 399 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcd, 0x4e, 0xc2, 0x40,
	0x18, 0xa4, 0x22, 0x50, 0xbe, 0x6a, 0x22, 0x0b, 0x68, 0x53, 0xa3, 0xc0, 0x9e, 0xb8, 0x48, 0xa2,
	0x24, 0x7a, 0x36, 0xe1, 0x42, 0x82, 0x3f, 0x69, 0xc4, 0x78, 0x23, 0xb5, 0x5d, 0x7e, 0x62, 0xff,
	0xa4, 0x0b, 0x49, 0xdf, 0xc1, 0xc7, 0xf1, 0x01, 0xcd, 0xee, 0x02, 0xd9, 0x96, 0x82, 0x1c, 0x3b,
	0x3b, 0xb3, 0xdf, 0xec, 0x37, 0x93, 0x42, 0xc5, 0x0d, 0x6c, 0xcb, 0x5d, 0x06, 0xee, 0xc2, 0x23,
	0x9d, 0x70, 0x1e, 0xd0, 0x00, 0x69, 0x12, 0x84, 0x6f, 0x01, 0x3d, 0x52, 0x6a, 0xd9, 0xd3, 0xbe,
	0x67, 0x4d, 0x88, 0x49, 0xbe, 0x17, 0x24, 0xa2, 0xe8, 0x12, 0xca, 0xce, 0x2c, 0xfa, 0x1a, 0x85,
	0x16, 0x9d, 0xea, 0x4a, 0x53, 0x69, 0x97, 0x4d, 0x95, 0x01, 0xaf, 0x16, 0x9d, 0xe2, 0x7b, 0xa8,
	0x26, 0x24, 0x51, 0x18, 0xf8, 0x11, 0x41, 0x0d, 0xd0, 0x1c, 0xb2, 0x9c, 0xd9, 0x44, 0x56, 0x81,
	0x80, 0xb8, 0xee, 0x47, 0x01, 0xf4, 0x14, 0x2c, 0x7c, 0xfa, 0xce, 0x47, 0xaf, 0x67, 0xfd, 0xa7,
	0x63, 0x04, 0x6a, 0xcd, 0x27, 0x84, 0x0a, 0xc2, 0x91, 0x20, 0x08, 0x88, 0x13, 0x2e, 0xa0, 0x34,
	0x8e, 0x46, 0x34, 0x0e, 0x89, 0x9e, 0xe7, 0x87, 0xc5, 0x71, 0xf4, 0x16, 0x87, 0x84, 0x3d, 0x63,
	0x4e, 0x2c, 0x67, 0x14, 0xf8, 0x6e, 0xac, 0x1f, 0x37, 0x95, 0xb6, 0x6a, 0xaa, 0x0c, 0x78, 0xf1,
	0xdd, 0x18, 0xd7, 0xa1, 0x9a, 0x70, 0x23, 0x9e, 0x81, 0xbb, 0x70, 0xd6, 0x8f, 0xf8, 0x01, 0x71,
	0x24, 0x8b, 0x7b, 0x1d, 0xe0, 0x1b, 0xa8, 0x48, 0xa2, 0xd5, 0x42, 0x74, 0x28, 0x79, 0x02, 0xe2,
	0x8f, 0x52, 0xcd, 0xf5, 0x27, 0x7e, 0x80, 0xda, 0xd0, 0xf7, 0x32, 0x57, 0x21, 0xcf, 0x51, 0xb6,
	0xe6, 0x3c, 0x43, 0x3d, 0x25, 0x3c, 0x70, 0xf9, 0xa8, 0x06, 0x05, 0x9b, 0xe9, 0xb8, 0xf9, 0x82,
	0x29, 0x3e, 0x58, 0x94, 0x3d, 0xc2, 0xa2, 0xec, 0x71, 0xe6, 0xa1, 0x91, 0xe0, 0x73, 0xa8, 0x25,
	0x75, 0xc2, 0xc6, 0xdd, 0x6f, 0x1e, 0xb4, 0x01, 0x6b, 0x97, 0xb0, 0x87, 0x4c, 0xd0, 0xa4, 0xaa,
	0xa0, 0x46, 0x47, 0x6e, 0xe3, 0x76, 0xef, 0x8c, 0xe6, 0x6e, 0xc2, 0x2a, 0x9e, 0x1c, 0x1a, 0x40,
	0x79, 0xb3, 0x6b, 0x74, 0x95, 0x10, 0xa4, 0x83, 0x33, 0xae, 0x77, 0x1d, 0x6f, 0x6e, 0x33, 0x41,
	0x93, 0x5a, 0x90, 0x72, 0xb8, 0xdd, 0xd6, 0x94, 0xc3, 0xac, 0x02, 0xe5, 0xd0, 0x07, 0x9c, 0x26,
	0x52, 0x42, 0xad, 0x84, 0x28, 0x2b, 0x7a, 0x03, 0xef, 0xa3, 0x6c, 0x6e, 0x1e, 0xc2, 0x89, 0xbc,
	0x77, 0x94, 0x74, 0x93, 0x11, 0xa5, 0xd1, 0xda, 0xc3, 0x58, 0x5f, 0xfb, 0x59, 0xe4, 0x3f, 0x86,
	0xee, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd6, 0xb4, 0x3a, 0x8b, 0x2d, 0x04, 0x00, 0x00,
}
